"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cosmjs+proto-signing@0.32.4";
exports.ids = ["vendor-chunks/@cosmjs+proto-signing@0.32.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/decode.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/decode.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeTxRaw = void 0;\nconst tx_1 = __webpack_require__(/*! cosmjs-types/cosmos/tx/v1beta1/tx */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.js\");\n/**\n * Takes a serialized TxRaw (the bytes stored in Tendermint) and decodes it into something usable.\n */\nfunction decodeTxRaw(tx) {\n    const txRaw = tx_1.TxRaw.decode(tx);\n    return {\n        authInfo: tx_1.AuthInfo.decode(txRaw.authInfoBytes),\n        body: tx_1.TxBody.decode(txRaw.bodyBytes),\n        signatures: txRaw.signatures,\n    };\n}\nexports.decodeTxRaw = decodeTxRaw;\n//# sourceMappingURL=decode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL2RlY29kZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsYUFBYSxtQkFBTyxDQUFDLDBJQUFtQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyIvaG9tZS9hYnViYWtyamltb2gvRGVza3RvcC9Db2RpbmcgU3R1ZmZzL2hhY2thdGhvbi9zZWNyZXQtbmV0d29yay9tZW1lQWlfY29pbl9jcmVhdG9yL2FpLW1lbWUtY29pbi1jcmVhdG9yL25vZGVfbW9kdWxlcy8ucG5wbS9AY29zbWpzK3Byb3RvLXNpZ25pbmdAMC4zMi40L25vZGVfbW9kdWxlcy9AY29zbWpzL3Byb3RvLXNpZ25pbmcvYnVpbGQvZGVjb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVUeFJhdyA9IHZvaWQgMDtcbmNvbnN0IHR4XzEgPSByZXF1aXJlKFwiY29zbWpzLXR5cGVzL2Nvc21vcy90eC92MWJldGExL3R4XCIpO1xuLyoqXG4gKiBUYWtlcyBhIHNlcmlhbGl6ZWQgVHhSYXcgKHRoZSBieXRlcyBzdG9yZWQgaW4gVGVuZGVybWludCkgYW5kIGRlY29kZXMgaXQgaW50byBzb21ldGhpbmcgdXNhYmxlLlxuICovXG5mdW5jdGlvbiBkZWNvZGVUeFJhdyh0eCkge1xuICAgIGNvbnN0IHR4UmF3ID0gdHhfMS5UeFJhdy5kZWNvZGUodHgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGF1dGhJbmZvOiB0eF8xLkF1dGhJbmZvLmRlY29kZSh0eFJhdy5hdXRoSW5mb0J5dGVzKSxcbiAgICAgICAgYm9keTogdHhfMS5UeEJvZHkuZGVjb2RlKHR4UmF3LmJvZHlCeXRlcyksXG4gICAgICAgIHNpZ25hdHVyZXM6IHR4UmF3LnNpZ25hdHVyZXMsXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVjb2RlVHhSYXcgPSBkZWNvZGVUeFJhdztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/decode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DirectSecp256k1HdWallet = exports.extractKdfConfiguration = void 0;\nconst amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/index.js\");\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/index.js\");\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"(ssr)/./node_modules/.pnpm/@cosmjs+utils@0.32.4/node_modules/@cosmjs/utils/build/index.js\");\nconst signing_1 = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signing.js\");\nconst wallet_1 = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/wallet.js\");\nconst serializationTypeV1 = \"directsecp256k1hdwallet-v1\";\n/**\n * A KDF configuration that is not very strong but can be used on the main thread.\n * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.\n */\nconst basicPasswordHashingOptions = {\n    algorithm: \"argon2id\",\n    params: {\n        outputLength: 32,\n        opsLimit: 24,\n        memLimitKib: 12 * 1024,\n    },\n};\nfunction isDerivationJson(thing) {\n    if (!(0, utils_1.isNonNullObject)(thing))\n        return false;\n    if (typeof thing.hdPath !== \"string\")\n        return false;\n    if (typeof thing.prefix !== \"string\")\n        return false;\n    return true;\n}\nfunction extractKdfConfigurationV1(doc) {\n    return doc.kdf;\n}\nfunction extractKdfConfiguration(serialization) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root))\n        throw new Error(\"Root document is not an object.\");\n    switch (root.type) {\n        case serializationTypeV1:\n            return extractKdfConfigurationV1(root);\n        default:\n            throw new Error(\"Unsupported serialization type\");\n    }\n}\nexports.extractKdfConfiguration = extractKdfConfiguration;\nconst defaultOptions = {\n    bip39Password: \"\",\n    hdPaths: [(0, amino_1.makeCosmoshubPath)(0)],\n    prefix: \"cosmos\",\n};\n/** A wallet for protobuf based signing using SIGN_MODE_DIRECT */\nclass DirectSecp256k1HdWallet {\n    /**\n     * Restores a wallet from the given BIP39 mnemonic.\n     *\n     * @param mnemonic Any valid English mnemonic.\n     * @param options An optional `DirectSecp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n    static async fromMnemonic(mnemonic, options = {}) {\n        const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n        const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);\n        return new DirectSecp256k1HdWallet(mnemonicChecked, {\n            ...options,\n            seed: seed,\n        });\n    }\n    /**\n     * Generates a new wallet with a BIP39 mnemonic of the given length.\n     *\n     * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n     * @param options An optional `DirectSecp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n    static async generate(length = 12, options = {}) {\n        const entropyLength = 4 * Math.floor((11 * length) / 33);\n        const entropy = crypto_1.Random.getBytes(entropyLength);\n        const mnemonic = crypto_1.Bip39.encode(entropy);\n        return DirectSecp256k1HdWallet.fromMnemonic(mnemonic.toString(), options);\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n    static async deserialize(serialization, password) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        switch (root.type) {\n            case serializationTypeV1:\n                return DirectSecp256k1HdWallet.deserializeTypeV1(serialization, password);\n            default:\n                throw new Error(\"Unsupported serialization type\");\n        }\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows\n     * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be\n     * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.\n     */\n    static async deserializeWithEncryptionKey(serialization, encryptionKey) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        const untypedRoot = root;\n        switch (untypedRoot.type) {\n            case serializationTypeV1: {\n                const decryptedBytes = await (0, wallet_1.decrypt)((0, encoding_1.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);\n                const decryptedDocument = JSON.parse((0, encoding_1.fromUtf8)(decryptedBytes));\n                const { mnemonic, accounts } = decryptedDocument;\n                (0, utils_1.assert)(typeof mnemonic === \"string\");\n                if (!Array.isArray(accounts))\n                    throw new Error(\"Property 'accounts' is not an array\");\n                if (!accounts.every((account) => isDerivationJson(account))) {\n                    throw new Error(\"Account is not in the correct format.\");\n                }\n                const firstPrefix = accounts[0].prefix;\n                if (!accounts.every(({ prefix }) => prefix === firstPrefix)) {\n                    throw new Error(\"Accounts do not all have the same prefix\");\n                }\n                const hdPaths = accounts.map(({ hdPath }) => (0, crypto_1.stringToPath)(hdPath));\n                return DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n                    hdPaths: hdPaths,\n                    prefix: firstPrefix,\n                });\n            }\n            default:\n                throw new Error(\"Unsupported serialization type\");\n        }\n    }\n    static async deserializeTypeV1(serialization, password) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        const encryptionKey = await (0, wallet_1.executeKdf)(password, root.kdf);\n        return DirectSecp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);\n    }\n    constructor(mnemonic, options) {\n        const prefix = options.prefix ?? defaultOptions.prefix;\n        const hdPaths = options.hdPaths ?? defaultOptions.hdPaths;\n        this.secret = mnemonic;\n        this.seed = options.seed;\n        this.accounts = hdPaths.map((hdPath) => ({\n            hdPath: hdPath,\n            prefix: prefix,\n        }));\n    }\n    get mnemonic() {\n        return this.secret.toString();\n    }\n    async getAccounts() {\n        const accountsWithPrivkeys = await this.getAccountsWithPrivkeys();\n        return accountsWithPrivkeys.map(({ algo, pubkey, address }) => ({\n            algo: algo,\n            pubkey: pubkey,\n            address: address,\n        }));\n    }\n    async signDirect(signerAddress, signDoc) {\n        const accounts = await this.getAccountsWithPrivkeys();\n        const account = accounts.find(({ address }) => address === signerAddress);\n        if (account === undefined) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const { privkey, pubkey } = account;\n        const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n        const hashedMessage = (0, crypto_1.sha256)(signBytes);\n        const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        const stdSignature = (0, amino_1.encodeSecp256k1Signature)(pubkey, signatureBytes);\n        return {\n            signed: signDoc,\n            signature: stdSignature,\n        };\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n    async serialize(password) {\n        const kdfConfiguration = basicPasswordHashingOptions;\n        const encryptionKey = await (0, wallet_1.executeKdf)(password, kdfConfiguration);\n        return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * This is an advanced alternative to calling `serialize(password)` directly, which allows you to\n     * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF options. If this\n     * is not the case, the wallet cannot be restored with the original password.\n     */\n    async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {\n        const dataToEncrypt = {\n            mnemonic: this.mnemonic,\n            accounts: this.accounts.map(({ hdPath, prefix }) => ({\n                hdPath: (0, crypto_1.pathToString)(hdPath),\n                prefix: prefix,\n            })),\n        };\n        const dataToEncryptRaw = (0, encoding_1.toUtf8)(JSON.stringify(dataToEncrypt));\n        const encryptionConfiguration = {\n            algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf,\n        };\n        const encryptedData = await (0, wallet_1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);\n        const out = {\n            type: serializationTypeV1,\n            kdf: kdfConfiguration,\n            encryption: encryptionConfiguration,\n            data: (0, encoding_1.toBase64)(encryptedData),\n        };\n        return JSON.stringify(out);\n    }\n    async getKeyPair(hdPath) {\n        const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, this.seed, hdPath);\n        const { pubkey } = await crypto_1.Secp256k1.makeKeypair(privkey);\n        return {\n            privkey: privkey,\n            pubkey: crypto_1.Secp256k1.compressPubkey(pubkey),\n        };\n    }\n    async getAccountsWithPrivkeys() {\n        return Promise.all(this.accounts.map(async ({ hdPath, prefix }) => {\n            const { privkey, pubkey } = await this.getKeyPair(hdPath);\n            const address = (0, encoding_1.toBech32)(prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(pubkey));\n            return {\n                algo: \"secp256k1\",\n                privkey: privkey,\n                pubkey: pubkey,\n                address: address,\n            };\n        }));\n    }\n}\nexports.DirectSecp256k1HdWallet = DirectSecp256k1HdWallet;\n//# sourceMappingURL=directsecp256k1hdwallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DirectSecp256k1Wallet = void 0;\nconst amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/index.js\");\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/index.js\");\nconst signing_1 = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signing.js\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\nclass DirectSecp256k1Wallet {\n    /**\n     * Creates a DirectSecp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    get address() {\n        return (0, encoding_1.toBech32)(this.prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signDirect(address, signDoc) {\n        const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n        if (address !== this.address) {\n            throw new Error(`Address ${address} not found in wallet`);\n        }\n        const hashedMessage = (0, crypto_1.sha256)(signBytes);\n        const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        const stdSignature = (0, amino_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes);\n        return {\n            signed: signDoc,\n            signature: stdSignature,\n        };\n    }\n}\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;\n//# sourceMappingURL=directsecp256k1wallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL2RpcmVjdHNlY3AyNTZrMXdhbGxldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0IsZ0JBQWdCLG1CQUFPLENBQUMsZ0hBQWU7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsbUhBQWdCO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLHlIQUFrQjtBQUM3QyxrQkFBa0IsbUJBQU8sQ0FBQyw4SEFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9ob21lL2FidWJha3JqaW1vaC9EZXNrdG9wL0NvZGluZyBTdHVmZnMvaGFja2F0aG9uL3NlY3JldC1uZXR3b3JrL21lbWVBaV9jb2luX2NyZWF0b3IvYWktbWVtZS1jb2luLWNyZWF0b3Ivbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrcHJvdG8tc2lnbmluZ0AwLjMyLjQvbm9kZV9tb2R1bGVzL0Bjb3NtanMvcHJvdG8tc2lnbmluZy9idWlsZC9kaXJlY3RzZWNwMjU2azF3YWxsZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpcmVjdFNlY3AyNTZrMVdhbGxldCA9IHZvaWQgMDtcbmNvbnN0IGFtaW5vXzEgPSByZXF1aXJlKFwiQGNvc21qcy9hbWlub1wiKTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkBjb3NtanMvY3J5cHRvXCIpO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCJAY29zbWpzL2VuY29kaW5nXCIpO1xuY29uc3Qgc2lnbmluZ18xID0gcmVxdWlyZShcIi4vc2lnbmluZ1wiKTtcbi8qKlxuICogQSB3YWxsZXQgdGhhdCBob2xkcyBhIHNpbmdsZSBzZWNwMjU2azEga2V5cGFpci5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byB3b3JrIHdpdGggQklQMzkgbW5lbW9uaWNzIGFuZCBtdWx0aXBsZSBhY2NvdW50cywgdXNlIERpcmVjdFNlY3AyNTZrMUhkV2FsbGV0LlxuICovXG5jbGFzcyBEaXJlY3RTZWNwMjU2azFXYWxsZXQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBEaXJlY3RTZWNwMjU2azFXYWxsZXQgZnJvbSB0aGUgZ2l2ZW4gcHJpdmF0ZSBrZXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcml2a2V5IFRoZSBwcml2YXRlIGtleS5cbiAgICAgKiBAcGFyYW0gcHJlZml4IFRoZSBiZWNoMzIgYWRkcmVzcyBwcmVmaXggKGh1bWFuIHJlYWRhYmxlIHBhcnQpLiBEZWZhdWx0cyB0byBcImNvc21vc1wiLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmcm9tS2V5KHByaXZrZXksIHByZWZpeCA9IFwiY29zbW9zXCIpIHtcbiAgICAgICAgY29uc3QgdW5jb21wcmVzc2VkID0gKGF3YWl0IGNyeXB0b18xLlNlY3AyNTZrMS5tYWtlS2V5cGFpcihwcml2a2V5KSkucHVia2V5O1xuICAgICAgICByZXR1cm4gbmV3IERpcmVjdFNlY3AyNTZrMVdhbGxldChwcml2a2V5LCBjcnlwdG9fMS5TZWNwMjU2azEuY29tcHJlc3NQdWJrZXkodW5jb21wcmVzc2VkKSwgcHJlZml4KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocHJpdmtleSwgcHVia2V5LCBwcmVmaXgpIHtcbiAgICAgICAgdGhpcy5wcml2a2V5ID0gcHJpdmtleTtcbiAgICAgICAgdGhpcy5wdWJrZXkgPSBwdWJrZXk7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgIH1cbiAgICBnZXQgYWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuICgwLCBlbmNvZGluZ18xLnRvQmVjaDMyKSh0aGlzLnByZWZpeCwgKDAsIGFtaW5vXzEucmF3U2VjcDI1NmsxUHVia2V5VG9SYXdBZGRyZXNzKSh0aGlzLnB1YmtleSkpO1xuICAgIH1cbiAgICBhc3luYyBnZXRBY2NvdW50cygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhbGdvOiBcInNlY3AyNTZrMVwiLFxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBwdWJrZXk6IHRoaXMucHVia2V5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgYXN5bmMgc2lnbkRpcmVjdChhZGRyZXNzLCBzaWduRG9jKSB7XG4gICAgICAgIGNvbnN0IHNpZ25CeXRlcyA9ICgwLCBzaWduaW5nXzEubWFrZVNpZ25CeXRlcykoc2lnbkRvYyk7XG4gICAgICAgIGlmIChhZGRyZXNzICE9PSB0aGlzLmFkZHJlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQWRkcmVzcyAke2FkZHJlc3N9IG5vdCBmb3VuZCBpbiB3YWxsZXRgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNoZWRNZXNzYWdlID0gKDAsIGNyeXB0b18xLnNoYTI1Nikoc2lnbkJ5dGVzKTtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgY3J5cHRvXzEuU2VjcDI1NmsxLmNyZWF0ZVNpZ25hdHVyZShoYXNoZWRNZXNzYWdlLCB0aGlzLnByaXZrZXkpO1xuICAgICAgICBjb25zdCBzaWduYXR1cmVCeXRlcyA9IG5ldyBVaW50OEFycmF5KFsuLi5zaWduYXR1cmUucigzMiksIC4uLnNpZ25hdHVyZS5zKDMyKV0pO1xuICAgICAgICBjb25zdCBzdGRTaWduYXR1cmUgPSAoMCwgYW1pbm9fMS5lbmNvZGVTZWNwMjU2azFTaWduYXR1cmUpKHRoaXMucHVia2V5LCBzaWduYXR1cmVCeXRlcyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaWduZWQ6IHNpZ25Eb2MsXG4gICAgICAgICAgICBzaWduYXR1cmU6IHN0ZFNpZ25hdHVyZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkRpcmVjdFNlY3AyNTZrMVdhbGxldCA9IERpcmVjdFNlY3AyNTZrMVdhbGxldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdHNlY3AyNTZrMXdhbGxldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/index.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/index.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseCoins = exports.coins = exports.coin = exports.executeKdf = exports.makeSignDoc = exports.makeSignBytes = exports.makeAuthInfoBytes = exports.isOfflineDirectSigner = exports.Registry = exports.isTxBodyEncodeObject = exports.isTsProtoGeneratedType = exports.isPbjsGeneratedType = exports.encodePubkey = exports.decodePubkey = exports.decodeOptionalPubkey = exports.anyToSinglePubkey = exports.makeCosmoshubPath = exports.DirectSecp256k1Wallet = exports.extractKdfConfiguration = exports.DirectSecp256k1HdWallet = exports.decodeTxRaw = void 0;\n// This type happens to be shared between Amino and Direct sign modes\nvar decode_1 = __webpack_require__(/*! ./decode */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/decode.js\");\nObject.defineProperty(exports, \"decodeTxRaw\", ({ enumerable: true, get: function () { return decode_1.decodeTxRaw; } }));\nvar directsecp256k1hdwallet_1 = __webpack_require__(/*! ./directsecp256k1hdwallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.js\");\nObject.defineProperty(exports, \"DirectSecp256k1HdWallet\", ({ enumerable: true, get: function () { return directsecp256k1hdwallet_1.DirectSecp256k1HdWallet; } }));\nObject.defineProperty(exports, \"extractKdfConfiguration\", ({ enumerable: true, get: function () { return directsecp256k1hdwallet_1.extractKdfConfiguration; } }));\nvar directsecp256k1wallet_1 = __webpack_require__(/*! ./directsecp256k1wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.js\");\nObject.defineProperty(exports, \"DirectSecp256k1Wallet\", ({ enumerable: true, get: function () { return directsecp256k1wallet_1.DirectSecp256k1Wallet; } }));\nvar paths_1 = __webpack_require__(/*! ./paths */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/paths.js\");\nObject.defineProperty(exports, \"makeCosmoshubPath\", ({ enumerable: true, get: function () { return paths_1.makeCosmoshubPath; } }));\nvar pubkey_1 = __webpack_require__(/*! ./pubkey */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/pubkey.js\");\nObject.defineProperty(exports, \"anyToSinglePubkey\", ({ enumerable: true, get: function () { return pubkey_1.anyToSinglePubkey; } }));\nObject.defineProperty(exports, \"decodeOptionalPubkey\", ({ enumerable: true, get: function () { return pubkey_1.decodeOptionalPubkey; } }));\nObject.defineProperty(exports, \"decodePubkey\", ({ enumerable: true, get: function () { return pubkey_1.decodePubkey; } }));\nObject.defineProperty(exports, \"encodePubkey\", ({ enumerable: true, get: function () { return pubkey_1.encodePubkey; } }));\nvar registry_1 = __webpack_require__(/*! ./registry */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/registry.js\");\nObject.defineProperty(exports, \"isPbjsGeneratedType\", ({ enumerable: true, get: function () { return registry_1.isPbjsGeneratedType; } }));\nObject.defineProperty(exports, \"isTsProtoGeneratedType\", ({ enumerable: true, get: function () { return registry_1.isTsProtoGeneratedType; } }));\nObject.defineProperty(exports, \"isTxBodyEncodeObject\", ({ enumerable: true, get: function () { return registry_1.isTxBodyEncodeObject; } }));\nObject.defineProperty(exports, \"Registry\", ({ enumerable: true, get: function () { return registry_1.Registry; } }));\nvar signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signer.js\");\nObject.defineProperty(exports, \"isOfflineDirectSigner\", ({ enumerable: true, get: function () { return signer_1.isOfflineDirectSigner; } }));\nvar signing_1 = __webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signing.js\");\nObject.defineProperty(exports, \"makeAuthInfoBytes\", ({ enumerable: true, get: function () { return signing_1.makeAuthInfoBytes; } }));\nObject.defineProperty(exports, \"makeSignBytes\", ({ enumerable: true, get: function () { return signing_1.makeSignBytes; } }));\nObject.defineProperty(exports, \"makeSignDoc\", ({ enumerable: true, get: function () { return signing_1.makeSignDoc; } }));\nvar wallet_1 = __webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/wallet.js\");\nObject.defineProperty(exports, \"executeKdf\", ({ enumerable: true, get: function () { return wallet_1.executeKdf; } }));\n// re-exports\nvar amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/index.js\");\nObject.defineProperty(exports, \"coin\", ({ enumerable: true, get: function () { return amino_1.coin; } }));\nObject.defineProperty(exports, \"coins\", ({ enumerable: true, get: function () { return amino_1.coins; } }));\nObject.defineProperty(exports, \"parseCoins\", ({ enumerable: true, get: function () { return amino_1.parseCoins; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLGFBQWEsR0FBRyxZQUFZLEdBQUcsa0JBQWtCLEdBQUcsbUJBQW1CLEdBQUcscUJBQXFCLEdBQUcseUJBQXlCLEdBQUcsNkJBQTZCLEdBQUcsZ0JBQWdCLEdBQUcsNEJBQTRCLEdBQUcsOEJBQThCLEdBQUcsMkJBQTJCLEdBQUcsb0JBQW9CLEdBQUcsb0JBQW9CLEdBQUcsNEJBQTRCLEdBQUcseUJBQXlCLEdBQUcseUJBQXlCLEdBQUcsNkJBQTZCLEdBQUcsK0JBQStCLEdBQUcsK0JBQStCLEdBQUcsbUJBQW1CO0FBQ2hpQjtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw0SEFBVTtBQUNqQywrQ0FBOEMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDdEgsZ0NBQWdDLG1CQUFPLENBQUMsOEpBQTJCO0FBQ25FLDJEQUEwRCxFQUFFLHFDQUFxQyw2REFBNkQsRUFBQztBQUMvSiwyREFBMEQsRUFBRSxxQ0FBcUMsNkRBQTZELEVBQUM7QUFDL0osOEJBQThCLG1CQUFPLENBQUMsMEpBQXlCO0FBQy9ELHlEQUF3RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUN6SixjQUFjLG1CQUFPLENBQUMsMEhBQVM7QUFDL0IscURBQW9ELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQ2pJLGVBQWUsbUJBQU8sQ0FBQyw0SEFBVTtBQUNqQyxxREFBb0QsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDbEksd0RBQXVELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ3hJLGdEQUErQyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUN4SCxnREFBK0MsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDeEgsaUJBQWlCLG1CQUFPLENBQUMsZ0lBQVk7QUFDckMsdURBQXNELEVBQUUscUNBQXFDLDBDQUEwQyxFQUFDO0FBQ3hJLDBEQUF5RCxFQUFFLHFDQUFxQyw2Q0FBNkMsRUFBQztBQUM5SSx3REFBdUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDMUksNENBQTJDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2xILGVBQWUsbUJBQU8sQ0FBQyw0SEFBVTtBQUNqQyx5REFBd0QsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDMUksZ0JBQWdCLG1CQUFPLENBQUMsOEhBQVc7QUFDbkMscURBQW9ELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ25JLGlEQUFnRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUMzSCwrQ0FBOEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDdkgsZUFBZSxtQkFBTyxDQUFDLDRIQUFVO0FBQ2pDLDhDQUE2QyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNwSDtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxnSEFBZTtBQUNyQyx3Q0FBdUMsRUFBRSxxQ0FBcUMsd0JBQXdCLEVBQUM7QUFDdkcseUNBQXdDLEVBQUUscUNBQXFDLHlCQUF5QixFQUFDO0FBQ3pHLDhDQUE2QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNuSCIsInNvdXJjZXMiOlsiL2hvbWUvYWJ1YmFrcmppbW9oL0Rlc2t0b3AvQ29kaW5nIFN0dWZmcy9oYWNrYXRob24vc2VjcmV0LW5ldHdvcmsvbWVtZUFpX2NvaW5fY3JlYXRvci9haS1tZW1lLWNvaW4tY3JlYXRvci9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUNvaW5zID0gZXhwb3J0cy5jb2lucyA9IGV4cG9ydHMuY29pbiA9IGV4cG9ydHMuZXhlY3V0ZUtkZiA9IGV4cG9ydHMubWFrZVNpZ25Eb2MgPSBleHBvcnRzLm1ha2VTaWduQnl0ZXMgPSBleHBvcnRzLm1ha2VBdXRoSW5mb0J5dGVzID0gZXhwb3J0cy5pc09mZmxpbmVEaXJlY3RTaWduZXIgPSBleHBvcnRzLlJlZ2lzdHJ5ID0gZXhwb3J0cy5pc1R4Qm9keUVuY29kZU9iamVjdCA9IGV4cG9ydHMuaXNUc1Byb3RvR2VuZXJhdGVkVHlwZSA9IGV4cG9ydHMuaXNQYmpzR2VuZXJhdGVkVHlwZSA9IGV4cG9ydHMuZW5jb2RlUHVia2V5ID0gZXhwb3J0cy5kZWNvZGVQdWJrZXkgPSBleHBvcnRzLmRlY29kZU9wdGlvbmFsUHVia2V5ID0gZXhwb3J0cy5hbnlUb1NpbmdsZVB1YmtleSA9IGV4cG9ydHMubWFrZUNvc21vc2h1YlBhdGggPSBleHBvcnRzLkRpcmVjdFNlY3AyNTZrMVdhbGxldCA9IGV4cG9ydHMuZXh0cmFjdEtkZkNvbmZpZ3VyYXRpb24gPSBleHBvcnRzLkRpcmVjdFNlY3AyNTZrMUhkV2FsbGV0ID0gZXhwb3J0cy5kZWNvZGVUeFJhdyA9IHZvaWQgMDtcbi8vIFRoaXMgdHlwZSBoYXBwZW5zIHRvIGJlIHNoYXJlZCBiZXR3ZWVuIEFtaW5vIGFuZCBEaXJlY3Qgc2lnbiBtb2Rlc1xudmFyIGRlY29kZV8xID0gcmVxdWlyZShcIi4vZGVjb2RlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlVHhSYXdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8xLmRlY29kZVR4UmF3OyB9IH0pO1xudmFyIGRpcmVjdHNlY3AyNTZrMWhkd2FsbGV0XzEgPSByZXF1aXJlKFwiLi9kaXJlY3RzZWNwMjU2azFoZHdhbGxldFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpcmVjdFNlY3AyNTZrMUhkV2FsbGV0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXJlY3RzZWNwMjU2azFoZHdhbGxldF8xLkRpcmVjdFNlY3AyNTZrMUhkV2FsbGV0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXh0cmFjdEtkZkNvbmZpZ3VyYXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpcmVjdHNlY3AyNTZrMWhkd2FsbGV0XzEuZXh0cmFjdEtkZkNvbmZpZ3VyYXRpb247IH0gfSk7XG52YXIgZGlyZWN0c2VjcDI1Nmsxd2FsbGV0XzEgPSByZXF1aXJlKFwiLi9kaXJlY3RzZWNwMjU2azF3YWxsZXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXJlY3RTZWNwMjU2azFXYWxsZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpcmVjdHNlY3AyNTZrMXdhbGxldF8xLkRpcmVjdFNlY3AyNTZrMVdhbGxldDsgfSB9KTtcbnZhciBwYXRoc18xID0gcmVxdWlyZShcIi4vcGF0aHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYWtlQ29zbW9zaHViUGF0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGF0aHNfMS5tYWtlQ29zbW9zaHViUGF0aDsgfSB9KTtcbnZhciBwdWJrZXlfMSA9IHJlcXVpcmUoXCIuL3B1YmtleVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFueVRvU2luZ2xlUHVia2V5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJrZXlfMS5hbnlUb1NpbmdsZVB1YmtleTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZU9wdGlvbmFsUHVia2V5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJrZXlfMS5kZWNvZGVPcHRpb25hbFB1YmtleTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZVB1YmtleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVia2V5XzEuZGVjb2RlUHVia2V5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlUHVia2V5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJrZXlfMS5lbmNvZGVQdWJrZXk7IH0gfSk7XG52YXIgcmVnaXN0cnlfMSA9IHJlcXVpcmUoXCIuL3JlZ2lzdHJ5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNQYmpzR2VuZXJhdGVkVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVnaXN0cnlfMS5pc1BianNHZW5lcmF0ZWRUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNUc1Byb3RvR2VuZXJhdGVkVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVnaXN0cnlfMS5pc1RzUHJvdG9HZW5lcmF0ZWRUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNUeEJvZHlFbmNvZGVPYmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZ2lzdHJ5XzEuaXNUeEJvZHlFbmNvZGVPYmplY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZWdpc3RyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVnaXN0cnlfMS5SZWdpc3RyeTsgfSB9KTtcbnZhciBzaWduZXJfMSA9IHJlcXVpcmUoXCIuL3NpZ25lclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzT2ZmbGluZURpcmVjdFNpZ25lclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmVyXzEuaXNPZmZsaW5lRGlyZWN0U2lnbmVyOyB9IH0pO1xudmFyIHNpZ25pbmdfMSA9IHJlcXVpcmUoXCIuL3NpZ25pbmdcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYWtlQXV0aEluZm9CeXRlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmluZ18xLm1ha2VBdXRoSW5mb0J5dGVzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWFrZVNpZ25CeXRlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmluZ18xLm1ha2VTaWduQnl0ZXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYWtlU2lnbkRvY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmluZ18xLm1ha2VTaWduRG9jOyB9IH0pO1xudmFyIHdhbGxldF8xID0gcmVxdWlyZShcIi4vd2FsbGV0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXhlY3V0ZUtkZlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2FsbGV0XzEuZXhlY3V0ZUtkZjsgfSB9KTtcbi8vIHJlLWV4cG9ydHNcbnZhciBhbWlub18xID0gcmVxdWlyZShcIkBjb3NtanMvYW1pbm9cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb2luXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhbWlub18xLmNvaW47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb2luc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYW1pbm9fMS5jb2luczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlQ29pbnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFtaW5vXzEucGFyc2VDb2luczsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/paths.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/paths.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeCosmoshubPath = void 0;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/index.js\");\n/**\n * The Cosmos Hub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n */\nfunction makeCosmoshubPath(a) {\n    return [\n        crypto_1.Slip10RawIndex.hardened(44),\n        crypto_1.Slip10RawIndex.hardened(118),\n        crypto_1.Slip10RawIndex.hardened(0),\n        crypto_1.Slip10RawIndex.normal(0),\n        crypto_1.Slip10RawIndex.normal(a),\n    ];\n}\nexports.makeCosmoshubPath = makeCosmoshubPath;\n//# sourceMappingURL=paths.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3BhdGhzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixpQkFBaUIsbUJBQU8sQ0FBQyxtSEFBZ0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9ob21lL2FidWJha3JqaW1vaC9EZXNrdG9wL0NvZGluZyBTdHVmZnMvaGFja2F0aG9uL3NlY3JldC1uZXR3b3JrL21lbWVBaV9jb2luX2NyZWF0b3IvYWktbWVtZS1jb2luLWNyZWF0b3Ivbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb3NtanMrcHJvdG8tc2lnbmluZ0AwLjMyLjQvbm9kZV9tb2R1bGVzL0Bjb3NtanMvcHJvdG8tc2lnbmluZy9idWlsZC9wYXRocy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFrZUNvc21vc2h1YlBhdGggPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJAY29zbWpzL2NyeXB0b1wiKTtcbi8qKlxuICogVGhlIENvc21vcyBIdWIgZGVyaXZhdGlvbiBwYXRoIGluIHRoZSBmb3JtIGBtLzQ0Jy8xMTgnLzAnLzAvYWBcbiAqIHdpdGggMC1iYXNlZCBhY2NvdW50IGluZGV4IGBhYC5cbiAqL1xuZnVuY3Rpb24gbWFrZUNvc21vc2h1YlBhdGgoYSkge1xuICAgIHJldHVybiBbXG4gICAgICAgIGNyeXB0b18xLlNsaXAxMFJhd0luZGV4LmhhcmRlbmVkKDQ0KSxcbiAgICAgICAgY3J5cHRvXzEuU2xpcDEwUmF3SW5kZXguaGFyZGVuZWQoMTE4KSxcbiAgICAgICAgY3J5cHRvXzEuU2xpcDEwUmF3SW5kZXguaGFyZGVuZWQoMCksXG4gICAgICAgIGNyeXB0b18xLlNsaXAxMFJhd0luZGV4Lm5vcm1hbCgwKSxcbiAgICAgICAgY3J5cHRvXzEuU2xpcDEwUmF3SW5kZXgubm9ybWFsKGEpLFxuICAgIF07XG59XG5leHBvcnRzLm1ha2VDb3Ntb3NodWJQYXRoID0gbWFrZUNvc21vc2h1YlBhdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXRocy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/paths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/pubkey.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/pubkey.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeOptionalPubkey = exports.decodePubkey = exports.anyToSinglePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = __webpack_require__(/*! @cosmjs/amino */ \"(ssr)/./node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/index.js\");\nconst math_1 = __webpack_require__(/*! @cosmjs/math */ \"(ssr)/./node_modules/.pnpm/@cosmjs+math@0.32.4/node_modules/@cosmjs/math/build/index.js\");\nconst keys_1 = __webpack_require__(/*! cosmjs-types/cosmos/crypto/ed25519/keys */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/crypto/ed25519/keys.js\");\nconst keys_2 = __webpack_require__(/*! cosmjs-types/cosmos/crypto/multisig/keys */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/crypto/multisig/keys.js\");\nconst keys_3 = __webpack_require__(/*! cosmjs-types/cosmos/crypto/secp256k1/keys */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/crypto/secp256k1/keys.js\");\nconst any_1 = __webpack_require__(/*! cosmjs-types/google/protobuf/any */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/google/protobuf/any.js\");\n/**\n * Takes a pubkey in the Amino JSON object style (type/value wrapper)\n * and convertes it into a protobuf `Any`.\n *\n * This is the reverse operation to `decodePubkey`.\n */\nfunction encodePubkey(pubkey) {\n    if ((0, amino_1.isSecp256k1Pubkey)(pubkey)) {\n        const pubkeyProto = keys_3.PubKey.fromPartial({\n            key: (0, encoding_1.fromBase64)(pubkey.value),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n            value: Uint8Array.from(keys_3.PubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else if ((0, amino_1.isEd25519Pubkey)(pubkey)) {\n        const pubkeyProto = keys_1.PubKey.fromPartial({\n            key: (0, encoding_1.fromBase64)(pubkey.value),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.ed25519.PubKey\",\n            value: Uint8Array.from(keys_1.PubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else if ((0, amino_1.isMultisigThresholdPubkey)(pubkey)) {\n        const pubkeyProto = keys_2.LegacyAminoPubKey.fromPartial({\n            threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n            publicKeys: pubkey.value.pubkeys.map(encodePubkey),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n            value: Uint8Array.from(keys_2.LegacyAminoPubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else {\n        throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n    }\n}\nexports.encodePubkey = encodePubkey;\n/**\n * Decodes a single pubkey (i.e. not a multisig pubkey) from `Any` into\n * `SinglePubkey`.\n *\n * In most cases you probably want to use `decodePubkey`.\n */\nfunction anyToSinglePubkey(pubkey) {\n    switch (pubkey.typeUrl) {\n        case \"/cosmos.crypto.secp256k1.PubKey\": {\n            const { key } = keys_3.PubKey.decode(pubkey.value);\n            return (0, amino_1.encodeSecp256k1Pubkey)(key);\n        }\n        case \"/cosmos.crypto.ed25519.PubKey\": {\n            const { key } = keys_1.PubKey.decode(pubkey.value);\n            return (0, amino_1.encodeEd25519Pubkey)(key);\n        }\n        default:\n            throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n    }\n}\nexports.anyToSinglePubkey = anyToSinglePubkey;\n/**\n * Decodes a pubkey from a protobuf `Any` into `Pubkey`.\n * This supports single pubkeys such as Cosmos ed25519 and secp256k1 keys\n * as well as multisig threshold pubkeys.\n */\nfunction decodePubkey(pubkey) {\n    switch (pubkey.typeUrl) {\n        case \"/cosmos.crypto.secp256k1.PubKey\":\n        case \"/cosmos.crypto.ed25519.PubKey\": {\n            return anyToSinglePubkey(pubkey);\n        }\n        case \"/cosmos.crypto.multisig.LegacyAminoPubKey\": {\n            const { threshold, publicKeys } = keys_2.LegacyAminoPubKey.decode(pubkey.value);\n            const out = {\n                type: \"tendermint/PubKeyMultisigThreshold\",\n                value: {\n                    threshold: threshold.toString(),\n                    pubkeys: publicKeys.map(anyToSinglePubkey),\n                },\n            };\n            return out;\n        }\n        default:\n            throw new Error(`Pubkey type URL '${pubkey.typeUrl}' not recognized`);\n    }\n}\nexports.decodePubkey = decodePubkey;\n/**\n * Decodes an optional pubkey from a protobuf `Any` into `Pubkey | null`.\n * This supports single pubkeys such as Cosmos ed25519 and secp256k1 keys\n * as well as multisig threshold pubkeys.\n */\nfunction decodeOptionalPubkey(pubkey) {\n    if (!pubkey)\n        return null;\n    if (pubkey.typeUrl) {\n        if (pubkey.value.length) {\n            // both set\n            return decodePubkey(pubkey);\n        }\n        else {\n            throw new Error(`Pubkey is an Any with type URL '${pubkey.typeUrl}' but an empty value`);\n        }\n    }\n    else {\n        if (pubkey.value.length) {\n            throw new Error(`Pubkey is an Any with an empty type URL but a value set`);\n        }\n        else {\n            // both unset, assuming this empty instance means null\n            return null;\n        }\n    }\n}\nexports.decodeOptionalPubkey = decodeOptionalPubkey;\n//# sourceMappingURL=pubkey.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/pubkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/registry.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/registry.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Registry = exports.isTxBodyEncodeObject = exports.isPbjsGeneratedType = exports.isTsProtoGeneratedType = exports.isTelescopeGeneratedType = void 0;\nconst tx_1 = __webpack_require__(/*! cosmjs-types/cosmos/bank/v1beta1/tx */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/bank/v1beta1/tx.js\");\nconst coin_1 = __webpack_require__(/*! cosmjs-types/cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/base/v1beta1/coin.js\");\nconst tx_2 = __webpack_require__(/*! cosmjs-types/cosmos/tx/v1beta1/tx */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.js\");\nconst any_1 = __webpack_require__(/*! cosmjs-types/google/protobuf/any */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/google/protobuf/any.js\");\nfunction isTelescopeGeneratedType(type) {\n    const casted = type;\n    return typeof casted.fromPartial === \"function\" && typeof casted.typeUrl == \"string\";\n}\nexports.isTelescopeGeneratedType = isTelescopeGeneratedType;\nfunction isTsProtoGeneratedType(type) {\n    return typeof type.fromPartial === \"function\";\n}\nexports.isTsProtoGeneratedType = isTsProtoGeneratedType;\nfunction isPbjsGeneratedType(type) {\n    return !isTsProtoGeneratedType(type);\n}\nexports.isPbjsGeneratedType = isPbjsGeneratedType;\nconst defaultTypeUrls = {\n    cosmosCoin: \"/cosmos.base.v1beta1.Coin\",\n    cosmosMsgSend: \"/cosmos.bank.v1beta1.MsgSend\",\n    cosmosTxBody: \"/cosmos.tx.v1beta1.TxBody\",\n    googleAny: \"/google.protobuf.Any\",\n};\nfunction isTxBodyEncodeObject(encodeObject) {\n    return encodeObject.typeUrl === \"/cosmos.tx.v1beta1.TxBody\";\n}\nexports.isTxBodyEncodeObject = isTxBodyEncodeObject;\nclass Registry {\n    /**\n     * Creates a new Registry for mapping protobuf type identifiers/type URLs to\n     * actual implementations. Those implementations are typically generated with ts-proto\n     * but we also support protobuf.js as a type generator.\n     *\n     * If there is no parameter given, a `new Registry()` adds the types `Coin` and `MsgSend`\n     * for historic reasons. Those can be overriden by customTypes.\n     *\n     * There are currently two methods for adding new types:\n     * 1. Passing types to the constructor.\n     * 2. Using the `register()` method\n     */\n    constructor(customTypes) {\n        const { cosmosCoin, cosmosMsgSend } = defaultTypeUrls;\n        this.types = customTypes\n            ? new Map([...customTypes])\n            : new Map([\n                [cosmosCoin, coin_1.Coin],\n                [cosmosMsgSend, tx_1.MsgSend],\n            ]);\n    }\n    register(typeUrl, type) {\n        this.types.set(typeUrl, type);\n    }\n    /**\n     * Looks up a type that was previously added to the registry.\n     *\n     * The generator information (ts-proto or pbjs) gets lost along the way.\n     * If you need to work with the result type in TypeScript, you can use:\n     *\n     * ```\n     * import { assert } from \"@cosmjs/utils\";\n     *\n     * const Coin = registry.lookupType(\"/cosmos.base.v1beta1.Coin\");\n     * assert(Coin); // Ensures not unset\n     * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect\n     *\n     * // Coin is typed TsProtoGeneratedType now.\n     * ```\n     */\n    lookupType(typeUrl) {\n        return this.types.get(typeUrl);\n    }\n    lookupTypeWithError(typeUrl) {\n        const type = this.lookupType(typeUrl);\n        if (!type) {\n            throw new Error(`Unregistered type url: ${typeUrl}`);\n        }\n        return type;\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to protobuf if\n     * the given type was previously registered.\n     *\n     * If the value has to be wrapped in an Any, this needs to be done\n     * manually after this call. Or use `encodeAsAny` instead.\n     */\n    encode(encodeObject) {\n        const { value, typeUrl } = encodeObject;\n        if (isTxBodyEncodeObject(encodeObject)) {\n            return this.encodeTxBody(value);\n        }\n        const type = this.lookupTypeWithError(typeUrl);\n        const instance = isTelescopeGeneratedType(type) || isTsProtoGeneratedType(type)\n            ? type.fromPartial(value)\n            : type.create(value);\n        return type.encode(instance).finish();\n    }\n    /**\n     * Takes a typeUrl/value pair and encodes the value to an Any if\n     * the given type was previously registered.\n     */\n    encodeAsAny(encodeObject) {\n        const binaryValue = this.encode(encodeObject);\n        return any_1.Any.fromPartial({\n            typeUrl: encodeObject.typeUrl,\n            value: binaryValue,\n        });\n    }\n    encodeTxBody(txBodyFields) {\n        const wrappedMessages = txBodyFields.messages.map((message) => this.encodeAsAny(message));\n        const txBody = tx_2.TxBody.fromPartial({\n            ...txBodyFields,\n            timeoutHeight: BigInt(txBodyFields.timeoutHeight?.toString() ?? \"0\"),\n            messages: wrappedMessages,\n        });\n        return tx_2.TxBody.encode(txBody).finish();\n    }\n    decode({ typeUrl, value }) {\n        if (typeUrl === defaultTypeUrls.cosmosTxBody) {\n            return this.decodeTxBody(value);\n        }\n        const type = this.lookupTypeWithError(typeUrl);\n        const decoded = type.decode(value);\n        Object.entries(decoded).forEach(([key, val]) => {\n            if (typeof Buffer !== \"undefined\" && typeof Buffer.isBuffer !== \"undefined\" && Buffer.isBuffer(val)) {\n                decoded[key] = Uint8Array.from(val);\n            }\n        });\n        return decoded;\n    }\n    decodeTxBody(txBody) {\n        const decodedTxBody = tx_2.TxBody.decode(txBody);\n        return {\n            ...decodedTxBody,\n            messages: decodedTxBody.messages.map(({ typeUrl: typeUrl, value }) => {\n                if (!typeUrl) {\n                    throw new Error(\"Missing type_url in Any\");\n                }\n                if (!value) {\n                    throw new Error(\"Missing value in Any\");\n                }\n                return this.decode({ typeUrl, value });\n            }),\n        };\n    }\n}\nexports.Registry = Registry;\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signer.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signer.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isOfflineDirectSigner = void 0;\nfunction isOfflineDirectSigner(signer) {\n    return signer.signDirect !== undefined;\n}\nexports.isOfflineDirectSigner = isOfflineDirectSigner;\n//# sourceMappingURL=signer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3NpZ25lci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvaG9tZS9hYnViYWtyamltb2gvRGVza3RvcC9Db2RpbmcgU3R1ZmZzL2hhY2thdGhvbi9zZWNyZXQtbmV0d29yay9tZW1lQWlfY29pbl9jcmVhdG9yL2FpLW1lbWUtY29pbi1jcmVhdG9yL25vZGVfbW9kdWxlcy8ucG5wbS9AY29zbWpzK3Byb3RvLXNpZ25pbmdAMC4zMi40L25vZGVfbW9kdWxlcy9AY29zbWpzL3Byb3RvLXNpZ25pbmcvYnVpbGQvc2lnbmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc09mZmxpbmVEaXJlY3RTaWduZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc09mZmxpbmVEaXJlY3RTaWduZXIoc2lnbmVyKSB7XG4gICAgcmV0dXJuIHNpZ25lci5zaWduRGlyZWN0ICE9PSB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmlzT2ZmbGluZURpcmVjdFNpZ25lciA9IGlzT2ZmbGluZURpcmVjdFNpZ25lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25lci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signing.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signing.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = __webpack_require__(/*! @cosmjs/utils */ \"(ssr)/./node_modules/.pnpm/@cosmjs+utils@0.32.4/node_modules/@cosmjs/utils/build/index.js\");\nconst signing_1 = __webpack_require__(/*! cosmjs-types/cosmos/tx/signing/v1beta1/signing */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/signing/v1beta1/signing.js\");\nconst tx_1 = __webpack_require__(/*! cosmjs-types/cosmos/tx/v1beta1/tx */ \"(ssr)/./node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.js\");\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeSignerInfos(signers, signMode) {\n    return signers.map(({ pubkey, sequence }) => ({\n        publicKey: pubkey,\n        modeInfo: {\n            single: { mode: signMode },\n        },\n        sequence: BigInt(sequence),\n    }));\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit, feeGranter, feePayer, signMode = signing_1.SignMode.SIGN_MODE_DIRECT) {\n    // Required arguments 4 and 5 were added in CosmJS 0.29. Use runtime checks to help our non-TS users.\n    (0, utils_1.assert)(feeGranter === undefined || typeof feeGranter === \"string\", \"feeGranter must be undefined or string\");\n    (0, utils_1.assert)(feePayer === undefined || typeof feePayer === \"string\", \"feePayer must be undefined or string\");\n    const authInfo = tx_1.AuthInfo.fromPartial({\n        signerInfos: makeSignerInfos(signers, signMode),\n        fee: {\n            amount: [...feeAmount],\n            gasLimit: BigInt(gasLimit),\n            granter: feeGranter,\n            payer: feePayer,\n        },\n    });\n    return tx_1.AuthInfo.encode(authInfo).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n    return {\n        bodyBytes: bodyBytes,\n        authInfoBytes: authInfoBytes,\n        chainId: chainId,\n        accountNumber: BigInt(accountNumber),\n    };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes({ accountNumber, authInfoBytes, bodyBytes, chainId }) {\n    const signDoc = tx_1.SignDoc.fromPartial({\n        accountNumber: accountNumber,\n        authInfoBytes: authInfoBytes,\n        bodyBytes: bodyBytes,\n        chainId: chainId,\n    });\n    return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;\n//# sourceMappingURL=signing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3NpZ25pbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsbUJBQW1CLEdBQUcseUJBQXlCO0FBQ3ZFO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsZ0hBQWU7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsb0tBQWdEO0FBQzFFLGFBQWEsbUJBQU8sQ0FBQywwSUFBbUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGtCQUFrQjtBQUM1QztBQUNBO0FBQ0Esc0JBQXNCLGdCQUFnQjtBQUN0QyxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLHlCQUF5QixrREFBa0Q7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyIvaG9tZS9hYnViYWtyamltb2gvRGVza3RvcC9Db2RpbmcgU3R1ZmZzL2hhY2thdGhvbi9zZWNyZXQtbmV0d29yay9tZW1lQWlfY29pbl9jcmVhdG9yL2FpLW1lbWUtY29pbi1jcmVhdG9yL25vZGVfbW9kdWxlcy8ucG5wbS9AY29zbWpzK3Byb3RvLXNpZ25pbmdAMC4zMi40L25vZGVfbW9kdWxlcy9AY29zbWpzL3Byb3RvLXNpZ25pbmcvYnVpbGQvc2lnbmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFrZVNpZ25CeXRlcyA9IGV4cG9ydHMubWFrZVNpZ25Eb2MgPSBleHBvcnRzLm1ha2VBdXRoSW5mb0J5dGVzID0gdm9pZCAwO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBjb3NtanMvdXRpbHNcIik7XG5jb25zdCBzaWduaW5nXzEgPSByZXF1aXJlKFwiY29zbWpzLXR5cGVzL2Nvc21vcy90eC9zaWduaW5nL3YxYmV0YTEvc2lnbmluZ1wiKTtcbmNvbnN0IHR4XzEgPSByZXF1aXJlKFwiY29zbWpzLXR5cGVzL2Nvc21vcy90eC92MWJldGExL3R4XCIpO1xuLyoqXG4gKiBDcmVhdGUgc2lnbmVyIGluZm9zIGZyb20gdGhlIHByb3ZpZGVkIHNpZ25lcnMuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdCBzdXBwb3J0IGRpZmZlcmVudCBzaWduaW5nIG1vZGVzIGZvciB0aGUgZGlmZmVyZW50IHNpZ25lcnMuXG4gKi9cbmZ1bmN0aW9uIG1ha2VTaWduZXJJbmZvcyhzaWduZXJzLCBzaWduTW9kZSkge1xuICAgIHJldHVybiBzaWduZXJzLm1hcCgoeyBwdWJrZXksIHNlcXVlbmNlIH0pID0+ICh7XG4gICAgICAgIHB1YmxpY0tleTogcHVia2V5LFxuICAgICAgICBtb2RlSW5mbzoge1xuICAgICAgICAgICAgc2luZ2xlOiB7IG1vZGU6IHNpZ25Nb2RlIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNlcXVlbmNlOiBCaWdJbnQoc2VxdWVuY2UpLFxuICAgIH0pKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbmQgc2VyaWFsaXplcyBhbiBBdXRoSW5mbyBkb2N1bWVudC5cbiAqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IHN1cHBvcnQgZGlmZmVyZW50IHNpZ25pbmcgbW9kZXMgZm9yIHRoZSBkaWZmZXJlbnQgc2lnbmVycy5cbiAqL1xuZnVuY3Rpb24gbWFrZUF1dGhJbmZvQnl0ZXMoc2lnbmVycywgZmVlQW1vdW50LCBnYXNMaW1pdCwgZmVlR3JhbnRlciwgZmVlUGF5ZXIsIHNpZ25Nb2RlID0gc2lnbmluZ18xLlNpZ25Nb2RlLlNJR05fTU9ERV9ESVJFQ1QpIHtcbiAgICAvLyBSZXF1aXJlZCBhcmd1bWVudHMgNCBhbmQgNSB3ZXJlIGFkZGVkIGluIENvc21KUyAwLjI5LiBVc2UgcnVudGltZSBjaGVja3MgdG8gaGVscCBvdXIgbm9uLVRTIHVzZXJzLlxuICAgICgwLCB1dGlsc18xLmFzc2VydCkoZmVlR3JhbnRlciA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBmZWVHcmFudGVyID09PSBcInN0cmluZ1wiLCBcImZlZUdyYW50ZXIgbXVzdCBiZSB1bmRlZmluZWQgb3Igc3RyaW5nXCIpO1xuICAgICgwLCB1dGlsc18xLmFzc2VydCkoZmVlUGF5ZXIgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgZmVlUGF5ZXIgPT09IFwic3RyaW5nXCIsIFwiZmVlUGF5ZXIgbXVzdCBiZSB1bmRlZmluZWQgb3Igc3RyaW5nXCIpO1xuICAgIGNvbnN0IGF1dGhJbmZvID0gdHhfMS5BdXRoSW5mby5mcm9tUGFydGlhbCh7XG4gICAgICAgIHNpZ25lckluZm9zOiBtYWtlU2lnbmVySW5mb3Moc2lnbmVycywgc2lnbk1vZGUpLFxuICAgICAgICBmZWU6IHtcbiAgICAgICAgICAgIGFtb3VudDogWy4uLmZlZUFtb3VudF0sXG4gICAgICAgICAgICBnYXNMaW1pdDogQmlnSW50KGdhc0xpbWl0KSxcbiAgICAgICAgICAgIGdyYW50ZXI6IGZlZUdyYW50ZXIsXG4gICAgICAgICAgICBwYXllcjogZmVlUGF5ZXIsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHR4XzEuQXV0aEluZm8uZW5jb2RlKGF1dGhJbmZvKS5maW5pc2goKTtcbn1cbmV4cG9ydHMubWFrZUF1dGhJbmZvQnl0ZXMgPSBtYWtlQXV0aEluZm9CeXRlcztcbmZ1bmN0aW9uIG1ha2VTaWduRG9jKGJvZHlCeXRlcywgYXV0aEluZm9CeXRlcywgY2hhaW5JZCwgYWNjb3VudE51bWJlcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJvZHlCeXRlczogYm9keUJ5dGVzLFxuICAgICAgICBhdXRoSW5mb0J5dGVzOiBhdXRoSW5mb0J5dGVzLFxuICAgICAgICBjaGFpbklkOiBjaGFpbklkLFxuICAgICAgICBhY2NvdW50TnVtYmVyOiBCaWdJbnQoYWNjb3VudE51bWJlciksXG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZVNpZ25Eb2MgPSBtYWtlU2lnbkRvYztcbmZ1bmN0aW9uIG1ha2VTaWduQnl0ZXMoeyBhY2NvdW50TnVtYmVyLCBhdXRoSW5mb0J5dGVzLCBib2R5Qnl0ZXMsIGNoYWluSWQgfSkge1xuICAgIGNvbnN0IHNpZ25Eb2MgPSB0eF8xLlNpZ25Eb2MuZnJvbVBhcnRpYWwoe1xuICAgICAgICBhY2NvdW50TnVtYmVyOiBhY2NvdW50TnVtYmVyLFxuICAgICAgICBhdXRoSW5mb0J5dGVzOiBhdXRoSW5mb0J5dGVzLFxuICAgICAgICBib2R5Qnl0ZXM6IGJvZHlCeXRlcyxcbiAgICAgICAgY2hhaW5JZDogY2hhaW5JZCxcbiAgICB9KTtcbiAgICByZXR1cm4gdHhfMS5TaWduRG9jLmVuY29kZShzaWduRG9jKS5maW5pc2goKTtcbn1cbmV4cG9ydHMubWFrZVNpZ25CeXRlcyA9IG1ha2VTaWduQnl0ZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/wallet.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/wallet.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decrypt = exports.encrypt = exports.supportedAlgorithms = exports.executeKdf = exports.cosmjsSalt = void 0;\nconst crypto_1 = __webpack_require__(/*! @cosmjs/crypto */ \"(ssr)/./node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/index.js\");\nconst encoding_1 = __webpack_require__(/*! @cosmjs/encoding */ \"(ssr)/./node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/index.js\");\n/**\n * A fixed salt is chosen to archive a deterministic password to key derivation.\n * This reduces the scope of a potential rainbow attack to all CosmJS users.\n * Must be 16 bytes due to implementation limitations.\n */\nexports.cosmjsSalt = (0, encoding_1.toAscii)(\"The CosmJS salt.\");\nasync function executeKdf(password, configuration) {\n    switch (configuration.algorithm) {\n        case \"argon2id\": {\n            const options = configuration.params;\n            if (!(0, crypto_1.isArgon2idOptions)(options))\n                throw new Error(\"Invalid format of argon2id params\");\n            return crypto_1.Argon2id.execute(password, exports.cosmjsSalt, options);\n        }\n        default:\n            throw new Error(\"Unsupported KDF algorithm\");\n    }\n}\nexports.executeKdf = executeKdf;\nexports.supportedAlgorithms = {\n    xchacha20poly1305Ietf: \"xchacha20poly1305-ietf\",\n};\nasync function encrypt(plaintext, encryptionKey, config) {\n    switch (config.algorithm) {\n        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {\n            const nonce = crypto_1.Random.getBytes(crypto_1.xchacha20NonceLength);\n            // Prepend fixed-length nonce to ciphertext as suggested in the example from https://github.com/jedisct1/libsodium.js#api\n            return new Uint8Array([\n                ...nonce,\n                ...(await crypto_1.Xchacha20poly1305Ietf.encrypt(plaintext, encryptionKey, nonce)),\n            ]);\n        }\n        default:\n            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n    }\n}\nexports.encrypt = encrypt;\nasync function decrypt(ciphertext, encryptionKey, config) {\n    switch (config.algorithm) {\n        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {\n            const nonce = ciphertext.slice(0, crypto_1.xchacha20NonceLength);\n            return crypto_1.Xchacha20poly1305Ietf.decrypt(ciphertext.slice(crypto_1.xchacha20NonceLength), encryptionKey, nonce);\n        }\n        default:\n            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n    }\n}\nexports.decrypt = decrypt;\n//# sourceMappingURL=wallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3dhbGxldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlLEdBQUcsZUFBZSxHQUFHLDJCQUEyQixHQUFHLGtCQUFrQixHQUFHLGtCQUFrQjtBQUN6RyxpQkFBaUIsbUJBQU8sQ0FBQyxtSEFBZ0I7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMseUhBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxpQkFBaUI7QUFDbkY7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxpQkFBaUI7QUFDbkY7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL2hvbWUvYWJ1YmFrcmppbW9oL0Rlc2t0b3AvQ29kaW5nIFN0dWZmcy9oYWNrYXRob24vc2VjcmV0LW5ldHdvcmsvbWVtZUFpX2NvaW5fY3JlYXRvci9haS1tZW1lLWNvaW4tY3JlYXRvci9ub2RlX21vZHVsZXMvLnBucG0vQGNvc21qcytwcm90by1zaWduaW5nQDAuMzIuNC9ub2RlX21vZHVsZXMvQGNvc21qcy9wcm90by1zaWduaW5nL2J1aWxkL3dhbGxldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjcnlwdCA9IGV4cG9ydHMuZW5jcnlwdCA9IGV4cG9ydHMuc3VwcG9ydGVkQWxnb3JpdGhtcyA9IGV4cG9ydHMuZXhlY3V0ZUtkZiA9IGV4cG9ydHMuY29zbWpzU2FsdCA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkBjb3NtanMvY3J5cHRvXCIpO1xuY29uc3QgZW5jb2RpbmdfMSA9IHJlcXVpcmUoXCJAY29zbWpzL2VuY29kaW5nXCIpO1xuLyoqXG4gKiBBIGZpeGVkIHNhbHQgaXMgY2hvc2VuIHRvIGFyY2hpdmUgYSBkZXRlcm1pbmlzdGljIHBhc3N3b3JkIHRvIGtleSBkZXJpdmF0aW9uLlxuICogVGhpcyByZWR1Y2VzIHRoZSBzY29wZSBvZiBhIHBvdGVudGlhbCByYWluYm93IGF0dGFjayB0byBhbGwgQ29zbUpTIHVzZXJzLlxuICogTXVzdCBiZSAxNiBieXRlcyBkdWUgdG8gaW1wbGVtZW50YXRpb24gbGltaXRhdGlvbnMuXG4gKi9cbmV4cG9ydHMuY29zbWpzU2FsdCA9ICgwLCBlbmNvZGluZ18xLnRvQXNjaWkpKFwiVGhlIENvc21KUyBzYWx0LlwiKTtcbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVLZGYocGFzc3dvcmQsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICBzd2l0Y2ggKGNvbmZpZ3VyYXRpb24uYWxnb3JpdGhtKSB7XG4gICAgICAgIGNhc2UgXCJhcmdvbjJpZFwiOiB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gY29uZmlndXJhdGlvbi5wYXJhbXM7XG4gICAgICAgICAgICBpZiAoISgwLCBjcnlwdG9fMS5pc0FyZ29uMmlkT3B0aW9ucykob3B0aW9ucykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBmb3JtYXQgb2YgYXJnb24yaWQgcGFyYW1zXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGNyeXB0b18xLkFyZ29uMmlkLmV4ZWN1dGUocGFzc3dvcmQsIGV4cG9ydHMuY29zbWpzU2FsdCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIEtERiBhbGdvcml0aG1cIik7XG4gICAgfVxufVxuZXhwb3J0cy5leGVjdXRlS2RmID0gZXhlY3V0ZUtkZjtcbmV4cG9ydHMuc3VwcG9ydGVkQWxnb3JpdGhtcyA9IHtcbiAgICB4Y2hhY2hhMjBwb2x5MTMwNUlldGY6IFwieGNoYWNoYTIwcG9seTEzMDUtaWV0ZlwiLFxufTtcbmFzeW5jIGZ1bmN0aW9uIGVuY3J5cHQocGxhaW50ZXh0LCBlbmNyeXB0aW9uS2V5LCBjb25maWcpIHtcbiAgICBzd2l0Y2ggKGNvbmZpZy5hbGdvcml0aG0pIHtcbiAgICAgICAgY2FzZSBleHBvcnRzLnN1cHBvcnRlZEFsZ29yaXRobXMueGNoYWNoYTIwcG9seTEzMDVJZXRmOiB7XG4gICAgICAgICAgICBjb25zdCBub25jZSA9IGNyeXB0b18xLlJhbmRvbS5nZXRCeXRlcyhjcnlwdG9fMS54Y2hhY2hhMjBOb25jZUxlbmd0aCk7XG4gICAgICAgICAgICAvLyBQcmVwZW5kIGZpeGVkLWxlbmd0aCBub25jZSB0byBjaXBoZXJ0ZXh0IGFzIHN1Z2dlc3RlZCBpbiB0aGUgZXhhbXBsZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qZWRpc2N0MS9saWJzb2RpdW0uanMjYXBpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAgICAgICAgIC4uLm5vbmNlLFxuICAgICAgICAgICAgICAgIC4uLihhd2FpdCBjcnlwdG9fMS5YY2hhY2hhMjBwb2x5MTMwNUlldGYuZW5jcnlwdChwbGFpbnRleHQsIGVuY3J5cHRpb25LZXksIG5vbmNlKSksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBlbmNyeXB0aW9uIGFsZ29yaXRobTogJyR7Y29uZmlnLmFsZ29yaXRobX0nYCk7XG4gICAgfVxufVxuZXhwb3J0cy5lbmNyeXB0ID0gZW5jcnlwdDtcbmFzeW5jIGZ1bmN0aW9uIGRlY3J5cHQoY2lwaGVydGV4dCwgZW5jcnlwdGlvbktleSwgY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcuYWxnb3JpdGhtKSB7XG4gICAgICAgIGNhc2UgZXhwb3J0cy5zdXBwb3J0ZWRBbGdvcml0aG1zLnhjaGFjaGEyMHBvbHkxMzA1SWV0Zjoge1xuICAgICAgICAgICAgY29uc3Qgbm9uY2UgPSBjaXBoZXJ0ZXh0LnNsaWNlKDAsIGNyeXB0b18xLnhjaGFjaGEyME5vbmNlTGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG9fMS5YY2hhY2hhMjBwb2x5MTMwNUlldGYuZGVjcnlwdChjaXBoZXJ0ZXh0LnNsaWNlKGNyeXB0b18xLnhjaGFjaGEyME5vbmNlTGVuZ3RoKSwgZW5jcnlwdGlvbktleSwgbm9uY2UpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGVuY3J5cHRpb24gYWxnb3JpdGhtOiAnJHtjb25maWcuYWxnb3JpdGhtfSdgKTtcbiAgICB9XG59XG5leHBvcnRzLmRlY3J5cHQgPSBkZWNyeXB0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FsbGV0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/wallet.js\n");

/***/ })

};
;