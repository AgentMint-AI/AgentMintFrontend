"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@webbuf+webbuf@3.0.26";
exports.ids = ["vendor-chunks/@webbuf+webbuf@3.0.26"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebBuf: () => (/* reexport safe */ _webbuf_js__WEBPACK_IMPORTED_MODULE_0__.WebBuf)\n/* harmony export */ });\n/* harmony import */ var _webbuf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webbuf.js */ \"(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/webbuf.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdlYmJ1Zit3ZWJidWZAMy4wLjI2L25vZGVfbW9kdWxlcy9Ad2ViYnVmL3dlYmJ1Zi9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDIiwic291cmNlcyI6WyIvaG9tZS9hYnViYWtyamltb2gvRGVza3RvcC9Db2RpbmcgU3R1ZmZzL2hhY2thdGhvbi9zZWNyZXQtbmV0d29yay9tZW1lQWlfY29pbl9jcmVhdG9yL2FpLW1lbWUtY29pbi1jcmVhdG9yL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2ViYnVmK3dlYmJ1ZkAzLjAuMjYvbm9kZV9tb2R1bGVzL0B3ZWJidWYvd2ViYnVmL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgV2ViQnVmIH0gZnJvbSBcIi4vd2ViYnVmLmpzXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __wbg_set_wasm: () => (/* reexport safe */ _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_wasm),\n/* harmony export */   __wbindgen_string_new: () => (/* reexport safe */ _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbindgen_string_new),\n/* harmony export */   decode_base64: () => (/* reexport safe */ _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__.decode_base64),\n/* harmony export */   decode_base64_strip_whitespace: () => (/* reexport safe */ _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__.decode_base64_strip_whitespace),\n/* harmony export */   decode_hex: () => (/* reexport safe */ _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__.decode_hex),\n/* harmony export */   encode_base64: () => (/* reexport safe */ _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__.encode_base64),\n/* harmony export */   encode_hex: () => (/* reexport safe */ _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__.encode_hex)\n/* harmony export */ });\n/* harmony import */ var _webbuf_bg_wasm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webbuf_bg.wasm.js */ \"(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.wasm.js\");\n/* harmony import */ var _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webbuf_bg.js */ \"(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.js\");\n\n\n\n(0,_webbuf_bg_js__WEBPACK_IMPORTED_MODULE_1__.__wbg_set_wasm)(_webbuf_bg_wasm_js__WEBPACK_IMPORTED_MODULE_0__.wasm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdlYmJ1Zit3ZWJidWZAMy4wLjI2L25vZGVfbW9kdWxlcy9Ad2ViYnVmL3dlYmJ1Zi9kaXN0L3JzLXdlYmJ1Zi1pbmxpbmUtYmFzZTY0L3dlYmJ1Zi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBMkM7QUFDWjtBQUNpQjtBQUNoRCw2REFBYyxDQUFDLG9EQUFJIiwic291cmNlcyI6WyIvaG9tZS9hYnViYWtyamltb2gvRGVza3RvcC9Db2RpbmcgU3R1ZmZzL2hhY2thdGhvbi9zZWNyZXQtbmV0d29yay9tZW1lQWlfY29pbl9jcmVhdG9yL2FpLW1lbWUtY29pbi1jcmVhdG9yL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2ViYnVmK3dlYmJ1ZkAzLjAuMjYvbm9kZV9tb2R1bGVzL0B3ZWJidWYvd2ViYnVmL2Rpc3QvcnMtd2ViYnVmLWlubGluZS1iYXNlNjQvd2ViYnVmLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdhc20gfSBmcm9tIFwiLi93ZWJidWZfYmcud2FzbS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vd2ViYnVmX2JnLmpzXCI7XG5pbXBvcnQgeyBfX3diZ19zZXRfd2FzbSB9IGZyb20gXCIuL3dlYmJ1Zl9iZy5qc1wiO1xuX193Ymdfc2V0X3dhc20od2FzbSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __wbg_set_wasm: () => (/* binding */ __wbg_set_wasm),\n/* harmony export */   __wbindgen_string_new: () => (/* binding */ __wbindgen_string_new),\n/* harmony export */   decode_base64: () => (/* binding */ decode_base64),\n/* harmony export */   decode_base64_strip_whitespace: () => (/* binding */ decode_base64_strip_whitespace),\n/* harmony export */   decode_hex: () => (/* binding */ decode_hex),\n/* harmony export */   encode_base64: () => (/* binding */ encode_base64),\n/* harmony export */   encode_hex: () => (/* binding */ encode_hex)\n/* harmony export */ });\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\ncachedTextDecoder.decode();\nlet cachedUint8ArrayMemory0 = null;\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\nconst heap = new Array(128).fill(undefined);\nheap.push(undefined, null, true, false);\nlet heap_next = heap.length;\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nlet WASM_VECTOR_LEN = 0;\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nlet cachedDataViewMemory0 = null;\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n/**\n * Encode a byte slice into a base64 string using the default engine\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode_base64(data) {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.encode_base64(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        deferred2_0 = r0;\n        deferred2_1 = r1;\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\nlet cachedTextEncoder = new lTextEncoder('utf-8');\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length\n        };\n    });\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n    const mem = getUint8ArrayMemory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nfunction getObject(idx) { return heap[idx]; }\nfunction dropObject(idx) {\n    if (idx < 132)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n * Decode a base64 string into a byte vector\n * Returns an error string if decoding fails\n * @param {string} encoded\n * @returns {Uint8Array}\n */\nfunction decode_base64_strip_whitespace(encoded) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(encoded, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.decode_base64_strip_whitespace(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1, 1);\n        return v2;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {string} encoded\n * @returns {Uint8Array}\n */\nfunction decode_base64(encoded) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(encoded, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.decode_base64(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1, 1);\n        return v2;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * Encode a byte slice into a hex string\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode_hex(data) {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.encode_hex(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        deferred2_0 = r0;\n        deferred2_1 = r1;\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n/**\n * Decode a hex string into a byte vector\n * Returns an error string if decoding fails\n * @param {string} encoded\n * @returns {Uint8Array}\n */\nfunction decode_hex(encoded) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(encoded, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.decode_hex(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1, 1);\n        return v2;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\nfunction __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.wasm.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.wasm.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wasm: () => (/* binding */ wasm)\n/* harmony export */ });\n/* harmony import */ var _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webbuf_bg.js */ \"(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.js\");\n\nconst wasmBase64 = \"\";\nconst wasmBinary = Uint8Array.from(atob(wasmBase64), c => c.charCodeAt(0));\nconst wasmModule = new WebAssembly.Module(wasmBinary);\nconst importObject = { './webbuf_bg.js': _webbuf_bg_js__WEBPACK_IMPORTED_MODULE_0__ };\nconst wasm = new WebAssembly.Instance(wasmModule, importObject).exports;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf_bg.wasm.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/webbuf.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/webbuf.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebBuf: () => (/* binding */ WebBuf)\n/* harmony export */ });\n/* harmony import */ var _rs_webbuf_inline_base64_webbuf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rs-webbuf-inline-base64/webbuf.js */ \"(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/rs-webbuf-inline-base64/webbuf.js\");\n\nfunction verifyOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) {\n        throw new Error(\"offset is not uint\");\n    }\n    if (offset + ext > length) {\n        throw new Error(\"Trying to access beyond buffer length\");\n    }\n}\nclass WebBuf extends Uint8Array {\n    static concat(list) {\n        const size = list.reduce((acc, buf) => acc + buf.length, 0);\n        const result = new WebBuf(size);\n        let offset = 0;\n        for (const buf of list) {\n            result.set(buf, offset);\n            offset += buf.length;\n        }\n        return result;\n    }\n    static alloc(size, fill = 0) {\n        const buf = new WebBuf(size);\n        if (fill !== 0) {\n            buf.fill(fill);\n        }\n        return buf;\n    }\n    fill(value, start = 0, end = this.length) {\n        for (let i = start; i < end; i++) {\n            this[i] = value;\n        }\n        return this;\n    }\n    // Override slice method to return WebBuf instead of Uint8Array\n    slice(start, end) {\n        const slicedArray = super.slice(start, end); // Create a slice using Uint8Array's slice method\n        return new WebBuf(slicedArray.buffer, slicedArray.byteOffset, slicedArray.byteLength); // Return a WebBuf instead\n    }\n    subarray(start, end) {\n        const subArray = super.subarray(start, end);\n        return new WebBuf(subArray.buffer, subArray.byteOffset, subArray.byteLength);\n    }\n    /**\n     * Reverse the buffer in place\n     * @returns webbuf\n     */\n    reverse() {\n        super.reverse();\n        return this;\n    }\n    clone() {\n        return new WebBuf(this);\n    }\n    toReverse() {\n        const cloned = new WebBuf(this);\n        cloned.reverse();\n        return cloned;\n    }\n    copy(target, targetStart = 0, sourceStart = 0, sourceEnd = this.length) {\n        if (sourceStart >= sourceEnd) {\n            return 0;\n        }\n        if (targetStart >= target.length) {\n            throw new Error(\"targetStart out of bounds\");\n        }\n        if (sourceEnd > this.length) {\n            throw new Error(\"sourceEnd out of bounds\");\n        }\n        if (targetStart + sourceEnd - sourceStart > target.length) {\n            throw new Error(\"source is too large\");\n        }\n        target.set(this.subarray(sourceStart, sourceEnd), targetStart);\n        return sourceEnd - sourceStart;\n    }\n    /**\n     * Return a WebBuf that is a view of the same data as the input Uint8Array\n     *\n     * @param buffer\n     * @returns WebBuf\n     */\n    static view(buffer) {\n        return new WebBuf(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    }\n    /**\n     * Create a new WebBuf from a Uint8Array (copy)\n     * @param buffer\n     * @returns webbuf\n     */\n    static fromUint8Array(buffer) {\n        return new WebBuf(buffer);\n    }\n    static fromArray(array) {\n        return new WebBuf(array);\n    }\n    static fromUtf8(str) {\n        const encoder = new TextEncoder();\n        return new WebBuf(encoder.encode(str));\n    }\n    static fromString(str, encoding = \"utf8\") {\n        if (encoding === \"hex\") {\n            return WebBuf.fromHex(str);\n        }\n        if (encoding === \"base64\") {\n            return WebBuf.fromBase64(str);\n        }\n        if (encoding === \"utf8\") {\n            return WebBuf.fromUtf8(str);\n        }\n        return WebBuf.fromUtf8(str);\n    }\n    // we use wasm for big data, because small data is faster in js\n    // experiments show wasm is always faster\n    static FROM_BASE64_ALGO_THRESHOLD = 10; // str len\n    // experiments show wasm is always faster\n    static TO_BASE64_ALGO_THRESHOLD = 10; // buf len\n    // experimentally derived for optimal performance\n    static FROM_HEX_ALGO_THRESHOLD = 1_000; // str len\n    // experiments show wasm is always faster\n    static TO_HEX_ALGO_THRESHOLD = 10; // buf len\n    static fromHexPureJs(hex) {\n        const result = new WebBuf(hex.length / 2);\n        for (let i = 0; i < hex.length; i += 2) {\n            result[i / 2] = Number.parseInt(hex.slice(i, i + 2), 16);\n        }\n        return result;\n    }\n    static fromHexWasm(hex) {\n        const uint8array = (0,_rs_webbuf_inline_base64_webbuf_js__WEBPACK_IMPORTED_MODULE_0__.decode_hex)(hex);\n        return new WebBuf(uint8array.buffer, uint8array.byteOffset, uint8array.byteLength);\n    }\n    static fromHex(hex) {\n        if (hex.length % 2 !== 0) {\n            throw new Error(\"Invalid hex string\");\n        }\n        if (hex.length < WebBuf.FROM_HEX_ALGO_THRESHOLD) {\n            return WebBuf.fromHexPureJs(hex);\n        }\n        return WebBuf.fromHexWasm(hex);\n    }\n    toHexPureJs() {\n        return Array.from(this)\n            .map((byte) => byte.toString(16).padStart(2, \"0\"))\n            .join(\"\");\n    }\n    toHexWasm() {\n        return (0,_rs_webbuf_inline_base64_webbuf_js__WEBPACK_IMPORTED_MODULE_0__.encode_hex)(this);\n    }\n    toHex() {\n        // disabled: experiments show this is not faster, even for small buffers\n        // if (this.length < WebBuf.TO_HEX_ALGO_THRESHOLD) {\n        //   return this.toHexPureJs();\n        // }\n        return this.toHexWasm();\n    }\n    static fromBase64PureJs(b64, stripWhitespace = false) {\n        const uint8array = new Uint8Array(atob(stripWhitespace ? b64.replace(/\\s+/g, \"\") : b64)\n            .split(\"\")\n            .map((c) => c.charCodeAt(0)));\n        return new WebBuf(uint8array.buffer, uint8array.byteOffset, uint8array.byteLength);\n    }\n    static fromBase64Wasm(b64, stripWhitespace = false) {\n        const uint8array = stripWhitespace\n            ? (0,_rs_webbuf_inline_base64_webbuf_js__WEBPACK_IMPORTED_MODULE_0__.decode_base64_strip_whitespace)(b64)\n            : (0,_rs_webbuf_inline_base64_webbuf_js__WEBPACK_IMPORTED_MODULE_0__.decode_base64)(b64);\n        return new WebBuf(uint8array.buffer, uint8array.byteOffset, uint8array.byteLength);\n    }\n    /**\n     * Convert a base64 string to a Uint8Array. Tolerant of whitespace, but\n     * throws if the string has invalid characters.\n     *\n     * @param b64\n     * @returns Uint8Array\n     * @throws {Error} if the input string is not valid base64\n     */\n    static fromBase64(b64, stripWhitespace = false) {\n        // disabled: experiments show this is not faster, even for small buffers\n        // if (b64.length < WebBuf.FROM_BASE64_ALGO_THRESHOLD) {\n        //   return WebBuf.fromBase64PureJs(b64, stripWhitespace);\n        // }\n        return WebBuf.fromBase64Wasm(b64, stripWhitespace);\n    }\n    toBase64PureJs() {\n        return btoa(String.fromCharCode(...new Uint8Array(this)));\n    }\n    toBase64Wasm() {\n        return (0,_rs_webbuf_inline_base64_webbuf_js__WEBPACK_IMPORTED_MODULE_0__.encode_base64)(this);\n    }\n    toBase64() {\n        // disabled: experiments show this is not faster, even for small buffers\n        // if (this.length < WebBuf.TO_BASE64_ALGO_THRESHOLD) {\n        //   return this.toBase64PureJs();\n        // }\n        return this.toBase64Wasm();\n    }\n    /**\n     * Override Uint8Array.from to return a WebBuf\n     *\n     * @param source An array-like or iterable object to convert to WebBuf\n     * @param mapFn Optional map function to call on every element of the array\n     * @param thisArg Optional value to use as `this` when executing `mapFn`\n     * @returns WebBuf\n     */\n    static from(source, mapFn, \n    // biome-ignore lint:\n    thisArg) {\n        if (typeof mapFn === \"string\") {\n            if (typeof source !== \"string\") {\n                throw new TypeError(\"Invalid mapFn\");\n            }\n            if (mapFn === \"hex\") {\n                return WebBuf.fromHex(source);\n            }\n            if (mapFn === \"base64\") {\n                return WebBuf.fromBase64(source);\n            }\n            if (mapFn === \"utf8\") {\n                return WebBuf.fromUtf8(source);\n            }\n            throw new TypeError(\"Invalid mapFn\");\n        }\n        if (typeof source === \"string\") {\n            return WebBuf.fromUtf8(source);\n        }\n        if (source instanceof Uint8Array) {\n            return WebBuf.view(source);\n        }\n        const sourceArray = Array.from(source);\n        // biome-ignore lint:\n        const uint8Array = super.from(sourceArray, mapFn, thisArg);\n        return new WebBuf(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    }\n    toUtf8() {\n        const decoder = new TextDecoder();\n        return decoder.decode(this);\n    }\n    toString(encoding) {\n        if (encoding === \"hex\") {\n            return this.toHex();\n        }\n        if (encoding === \"base64\") {\n            return this.toBase64();\n        }\n        if (encoding === \"utf8\") {\n            const decoder = new TextDecoder();\n            return decoder.decode(this);\n        }\n        return this.toUtf8();\n    }\n    inspect() {\n        return `<WebBuf ${this.toHex().slice(0, 40) + (this.length > 40 ? \"...\" : \"\")}>`;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    compare(other) {\n        const len = Math.min(this.length, other.length);\n        for (let i = 0; i < len; i++) {\n            if (this[i] !== other[i]) {\n                return this[i] < other[i] ? -1 : 1;\n            }\n        }\n        if (this.length < other.length) {\n            return -1;\n        }\n        if (this.length > other.length) {\n            return 1;\n        }\n        return 0;\n    }\n    static compare(buf1, buf2) {\n        return buf1.compare(buf2);\n    }\n    equals(other) {\n        return this.compare(other) === 0;\n    }\n    write(buf, offset = 0) {\n        verifyOffset(offset, buf.length, this.length);\n        this.set(buf, offset);\n        return buf.length;\n    }\n    read(offset, ext) {\n        verifyOffset(offset, ext, this.length);\n        return this.subarray(offset, offset + ext);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdlYmJ1Zit3ZWJidWZAMy4wLjI2L25vZGVfbW9kdWxlcy9Ad2ViYnVmL3dlYmJ1Zi9kaXN0L3dlYmJ1Zi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0STtBQUM1STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQsK0ZBQStGO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBLDBDQUEwQztBQUMxQztBQUNBLDRDQUE0QztBQUM1QztBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDhFQUFVO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDhFQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxrR0FBOEI7QUFDNUMsY0FBYyxpRkFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpRkFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNERBQTREO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixTQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9hYnViYWtyamltb2gvRGVza3RvcC9Db2RpbmcgU3R1ZmZzL2hhY2thdGhvbi9zZWNyZXQtbmV0d29yay9tZW1lQWlfY29pbl9jcmVhdG9yL2FpLW1lbWUtY29pbi1jcmVhdG9yL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2ViYnVmK3dlYmJ1ZkAzLjAuMjYvbm9kZV9tb2R1bGVzL0B3ZWJidWYvd2ViYnVmL2Rpc3Qvd2ViYnVmLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuY29kZV9iYXNlNjQsIGRlY29kZV9iYXNlNjQsIGRlY29kZV9iYXNlNjRfc3RyaXBfd2hpdGVzcGFjZSwgZW5jb2RlX2hleCwgZGVjb2RlX2hleCwgfSBmcm9tIFwiLi9ycy13ZWJidWYtaW5saW5lLWJhc2U2NC93ZWJidWYuanNcIjtcbmZ1bmN0aW9uIHZlcmlmeU9mZnNldChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gICAgaWYgKG9mZnNldCAlIDEgIT09IDAgfHwgb2Zmc2V0IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvZmZzZXQgaXMgbm90IHVpbnRcIik7XG4gICAgfVxuICAgIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aFwiKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgV2ViQnVmIGV4dGVuZHMgVWludDhBcnJheSB7XG4gICAgc3RhdGljIGNvbmNhdChsaXN0KSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBsaXN0LnJlZHVjZSgoYWNjLCBidWYpID0+IGFjYyArIGJ1Zi5sZW5ndGgsIDApO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgV2ViQnVmKHNpemUpO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBidWYgb2YgbGlzdCkge1xuICAgICAgICAgICAgcmVzdWx0LnNldChidWYsIG9mZnNldCk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdGF0aWMgYWxsb2Moc2l6ZSwgZmlsbCA9IDApIHtcbiAgICAgICAgY29uc3QgYnVmID0gbmV3IFdlYkJ1ZihzaXplKTtcbiAgICAgICAgaWYgKGZpbGwgIT09IDApIHtcbiAgICAgICAgICAgIGJ1Zi5maWxsKGZpbGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIGZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gT3ZlcnJpZGUgc2xpY2UgbWV0aG9kIHRvIHJldHVybiBXZWJCdWYgaW5zdGVhZCBvZiBVaW50OEFycmF5XG4gICAgc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgICAgICBjb25zdCBzbGljZWRBcnJheSA9IHN1cGVyLnNsaWNlKHN0YXJ0LCBlbmQpOyAvLyBDcmVhdGUgYSBzbGljZSB1c2luZyBVaW50OEFycmF5J3Mgc2xpY2UgbWV0aG9kXG4gICAgICAgIHJldHVybiBuZXcgV2ViQnVmKHNsaWNlZEFycmF5LmJ1ZmZlciwgc2xpY2VkQXJyYXkuYnl0ZU9mZnNldCwgc2xpY2VkQXJyYXkuYnl0ZUxlbmd0aCk7IC8vIFJldHVybiBhIFdlYkJ1ZiBpbnN0ZWFkXG4gICAgfVxuICAgIHN1YmFycmF5KHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgY29uc3Qgc3ViQXJyYXkgPSBzdXBlci5zdWJhcnJheShzdGFydCwgZW5kKTtcbiAgICAgICAgcmV0dXJuIG5ldyBXZWJCdWYoc3ViQXJyYXkuYnVmZmVyLCBzdWJBcnJheS5ieXRlT2Zmc2V0LCBzdWJBcnJheS5ieXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV2ZXJzZSB0aGUgYnVmZmVyIGluIHBsYWNlXG4gICAgICogQHJldHVybnMgd2ViYnVmXG4gICAgICovXG4gICAgcmV2ZXJzZSgpIHtcbiAgICAgICAgc3VwZXIucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgV2ViQnVmKHRoaXMpO1xuICAgIH1cbiAgICB0b1JldmVyc2UoKSB7XG4gICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBXZWJCdWYodGhpcyk7XG4gICAgICAgIGNsb25lZC5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxuICAgIGNvcHkodGFyZ2V0LCB0YXJnZXRTdGFydCA9IDAsIHNvdXJjZVN0YXJ0ID0gMCwgc291cmNlRW5kID0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHNvdXJjZVN0YXJ0ID49IHNvdXJjZUVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRhcmdldFN0YXJ0IG91dCBvZiBib3VuZHNcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZUVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzb3VyY2VFbmQgb3V0IG9mIGJvdW5kc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0U3RhcnQgKyBzb3VyY2VFbmQgLSBzb3VyY2VTdGFydCA+IHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNvdXJjZSBpcyB0b28gbGFyZ2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LnNldCh0aGlzLnN1YmFycmF5KHNvdXJjZVN0YXJ0LCBzb3VyY2VFbmQpLCB0YXJnZXRTdGFydCk7XG4gICAgICAgIHJldHVybiBzb3VyY2VFbmQgLSBzb3VyY2VTdGFydDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgV2ViQnVmIHRoYXQgaXMgYSB2aWV3IG9mIHRoZSBzYW1lIGRhdGEgYXMgdGhlIGlucHV0IFVpbnQ4QXJyYXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSBidWZmZXJcbiAgICAgKiBAcmV0dXJucyBXZWJCdWZcbiAgICAgKi9cbiAgICBzdGF0aWMgdmlldyhidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBXZWJCdWYoYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFdlYkJ1ZiBmcm9tIGEgVWludDhBcnJheSAoY29weSlcbiAgICAgKiBAcGFyYW0gYnVmZmVyXG4gICAgICogQHJldHVybnMgd2ViYnVmXG4gICAgICovXG4gICAgc3RhdGljIGZyb21VaW50OEFycmF5KGJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gbmV3IFdlYkJ1ZihidWZmZXIpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUFycmF5KGFycmF5KSB7XG4gICAgICAgIHJldHVybiBuZXcgV2ViQnVmKGFycmF5KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21VdGY4KHN0cikge1xuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgIHJldHVybiBuZXcgV2ViQnVmKGVuY29kZXIuZW5jb2RlKHN0cikpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhzdHIsIGVuY29kaW5nID0gXCJ1dGY4XCIpIHtcbiAgICAgICAgaWYgKGVuY29kaW5nID09PSBcImhleFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gV2ViQnVmLmZyb21IZXgoc3RyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IFwiYmFzZTY0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBXZWJCdWYuZnJvbUJhc2U2NChzdHIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJ1dGY4XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBXZWJCdWYuZnJvbVV0Zjgoc3RyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gV2ViQnVmLmZyb21VdGY4KHN0cik7XG4gICAgfVxuICAgIC8vIHdlIHVzZSB3YXNtIGZvciBiaWcgZGF0YSwgYmVjYXVzZSBzbWFsbCBkYXRhIGlzIGZhc3RlciBpbiBqc1xuICAgIC8vIGV4cGVyaW1lbnRzIHNob3cgd2FzbSBpcyBhbHdheXMgZmFzdGVyXG4gICAgc3RhdGljIEZST01fQkFTRTY0X0FMR09fVEhSRVNIT0xEID0gMTA7IC8vIHN0ciBsZW5cbiAgICAvLyBleHBlcmltZW50cyBzaG93IHdhc20gaXMgYWx3YXlzIGZhc3RlclxuICAgIHN0YXRpYyBUT19CQVNFNjRfQUxHT19USFJFU0hPTEQgPSAxMDsgLy8gYnVmIGxlblxuICAgIC8vIGV4cGVyaW1lbnRhbGx5IGRlcml2ZWQgZm9yIG9wdGltYWwgcGVyZm9ybWFuY2VcbiAgICBzdGF0aWMgRlJPTV9IRVhfQUxHT19USFJFU0hPTEQgPSAxXzAwMDsgLy8gc3RyIGxlblxuICAgIC8vIGV4cGVyaW1lbnRzIHNob3cgd2FzbSBpcyBhbHdheXMgZmFzdGVyXG4gICAgc3RhdGljIFRPX0hFWF9BTEdPX1RIUkVTSE9MRCA9IDEwOyAvLyBidWYgbGVuXG4gICAgc3RhdGljIGZyb21IZXhQdXJlSnMoaGV4KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBXZWJCdWYoaGV4Lmxlbmd0aCAvIDIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgcmVzdWx0W2kgLyAyXSA9IE51bWJlci5wYXJzZUludChoZXguc2xpY2UoaSwgaSArIDIpLCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21IZXhXYXNtKGhleCkge1xuICAgICAgICBjb25zdCB1aW50OGFycmF5ID0gZGVjb2RlX2hleChoZXgpO1xuICAgICAgICByZXR1cm4gbmV3IFdlYkJ1Zih1aW50OGFycmF5LmJ1ZmZlciwgdWludDhhcnJheS5ieXRlT2Zmc2V0LCB1aW50OGFycmF5LmJ5dGVMZW5ndGgpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUhleChoZXgpIHtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGhleCBzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhleC5sZW5ndGggPCBXZWJCdWYuRlJPTV9IRVhfQUxHT19USFJFU0hPTEQpIHtcbiAgICAgICAgICAgIHJldHVybiBXZWJCdWYuZnJvbUhleFB1cmVKcyhoZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBXZWJCdWYuZnJvbUhleFdhc20oaGV4KTtcbiAgICB9XG4gICAgdG9IZXhQdXJlSnMoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMpXG4gICAgICAgICAgICAubWFwKChieXRlKSA9PiBieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikpXG4gICAgICAgICAgICAuam9pbihcIlwiKTtcbiAgICB9XG4gICAgdG9IZXhXYXNtKCkge1xuICAgICAgICByZXR1cm4gZW5jb2RlX2hleCh0aGlzKTtcbiAgICB9XG4gICAgdG9IZXgoKSB7XG4gICAgICAgIC8vIGRpc2FibGVkOiBleHBlcmltZW50cyBzaG93IHRoaXMgaXMgbm90IGZhc3RlciwgZXZlbiBmb3Igc21hbGwgYnVmZmVyc1xuICAgICAgICAvLyBpZiAodGhpcy5sZW5ndGggPCBXZWJCdWYuVE9fSEVYX0FMR09fVEhSRVNIT0xEKSB7XG4gICAgICAgIC8vICAgcmV0dXJuIHRoaXMudG9IZXhQdXJlSnMoKTtcbiAgICAgICAgLy8gfVxuICAgICAgICByZXR1cm4gdGhpcy50b0hleFdhc20oKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CYXNlNjRQdXJlSnMoYjY0LCBzdHJpcFdoaXRlc3BhY2UgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCB1aW50OGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXRvYihzdHJpcFdoaXRlc3BhY2UgPyBiNjQucmVwbGFjZSgvXFxzKy9nLCBcIlwiKSA6IGI2NClcbiAgICAgICAgICAgIC5zcGxpdChcIlwiKVxuICAgICAgICAgICAgLm1hcCgoYykgPT4gYy5jaGFyQ29kZUF0KDApKSk7XG4gICAgICAgIHJldHVybiBuZXcgV2ViQnVmKHVpbnQ4YXJyYXkuYnVmZmVyLCB1aW50OGFycmF5LmJ5dGVPZmZzZXQsIHVpbnQ4YXJyYXkuYnl0ZUxlbmd0aCk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmFzZTY0V2FzbShiNjQsIHN0cmlwV2hpdGVzcGFjZSA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHVpbnQ4YXJyYXkgPSBzdHJpcFdoaXRlc3BhY2VcbiAgICAgICAgICAgID8gZGVjb2RlX2Jhc2U2NF9zdHJpcF93aGl0ZXNwYWNlKGI2NClcbiAgICAgICAgICAgIDogZGVjb2RlX2Jhc2U2NChiNjQpO1xuICAgICAgICByZXR1cm4gbmV3IFdlYkJ1Zih1aW50OGFycmF5LmJ1ZmZlciwgdWludDhhcnJheS5ieXRlT2Zmc2V0LCB1aW50OGFycmF5LmJ5dGVMZW5ndGgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgYmFzZTY0IHN0cmluZyB0byBhIFVpbnQ4QXJyYXkuIFRvbGVyYW50IG9mIHdoaXRlc3BhY2UsIGJ1dFxuICAgICAqIHRocm93cyBpZiB0aGUgc3RyaW5nIGhhcyBpbnZhbGlkIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYjY0XG4gICAgICogQHJldHVybnMgVWludDhBcnJheVxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgaW5wdXQgc3RyaW5nIGlzIG5vdCB2YWxpZCBiYXNlNjRcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUJhc2U2NChiNjQsIHN0cmlwV2hpdGVzcGFjZSA9IGZhbHNlKSB7XG4gICAgICAgIC8vIGRpc2FibGVkOiBleHBlcmltZW50cyBzaG93IHRoaXMgaXMgbm90IGZhc3RlciwgZXZlbiBmb3Igc21hbGwgYnVmZmVyc1xuICAgICAgICAvLyBpZiAoYjY0Lmxlbmd0aCA8IFdlYkJ1Zi5GUk9NX0JBU0U2NF9BTEdPX1RIUkVTSE9MRCkge1xuICAgICAgICAvLyAgIHJldHVybiBXZWJCdWYuZnJvbUJhc2U2NFB1cmVKcyhiNjQsIHN0cmlwV2hpdGVzcGFjZSk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgcmV0dXJuIFdlYkJ1Zi5mcm9tQmFzZTY0V2FzbShiNjQsIHN0cmlwV2hpdGVzcGFjZSk7XG4gICAgfVxuICAgIHRvQmFzZTY0UHVyZUpzKCkge1xuICAgICAgICByZXR1cm4gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm5ldyBVaW50OEFycmF5KHRoaXMpKSk7XG4gICAgfVxuICAgIHRvQmFzZTY0V2FzbSgpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZV9iYXNlNjQodGhpcyk7XG4gICAgfVxuICAgIHRvQmFzZTY0KCkge1xuICAgICAgICAvLyBkaXNhYmxlZDogZXhwZXJpbWVudHMgc2hvdyB0aGlzIGlzIG5vdCBmYXN0ZXIsIGV2ZW4gZm9yIHNtYWxsIGJ1ZmZlcnNcbiAgICAgICAgLy8gaWYgKHRoaXMubGVuZ3RoIDwgV2ViQnVmLlRPX0JBU0U2NF9BTEdPX1RIUkVTSE9MRCkge1xuICAgICAgICAvLyAgIHJldHVybiB0aGlzLnRvQmFzZTY0UHVyZUpzKCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9CYXNlNjRXYXNtKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIFVpbnQ4QXJyYXkuZnJvbSB0byByZXR1cm4gYSBXZWJCdWZcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb3VyY2UgQW4gYXJyYXktbGlrZSBvciBpdGVyYWJsZSBvYmplY3QgdG8gY29udmVydCB0byBXZWJCdWZcbiAgICAgKiBAcGFyYW0gbWFwRm4gT3B0aW9uYWwgbWFwIGZ1bmN0aW9uIHRvIGNhbGwgb24gZXZlcnkgZWxlbWVudCBvZiB0aGUgYXJyYXlcbiAgICAgKiBAcGFyYW0gdGhpc0FyZyBPcHRpb25hbCB2YWx1ZSB0byB1c2UgYXMgYHRoaXNgIHdoZW4gZXhlY3V0aW5nIGBtYXBGbmBcbiAgICAgKiBAcmV0dXJucyBXZWJCdWZcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbShzb3VyY2UsIG1hcEZuLCBcbiAgICAvLyBiaW9tZS1pZ25vcmUgbGludDpcbiAgICB0aGlzQXJnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWFwRm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgbWFwRm5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWFwRm4gPT09IFwiaGV4XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gV2ViQnVmLmZyb21IZXgoc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXBGbiA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBXZWJCdWYuZnJvbUJhc2U2NChzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcEZuID09PSBcInV0ZjhcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBXZWJCdWYuZnJvbVV0Zjgoc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIG1hcEZuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gV2ViQnVmLmZyb21VdGY4KHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBXZWJCdWYudmlldyhzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNvdXJjZUFycmF5ID0gQXJyYXkuZnJvbShzb3VyY2UpO1xuICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludDpcbiAgICAgICAgY29uc3QgdWludDhBcnJheSA9IHN1cGVyLmZyb20oc291cmNlQXJyYXksIG1hcEZuLCB0aGlzQXJnKTtcbiAgICAgICAgcmV0dXJuIG5ldyBXZWJCdWYodWludDhBcnJheS5idWZmZXIsIHVpbnQ4QXJyYXkuYnl0ZU9mZnNldCwgdWludDhBcnJheS5ieXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgdG9VdGY4KCkge1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZSh0aGlzKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoZW5jb2RpbmcpIHtcbiAgICAgICAgaWYgKGVuY29kaW5nID09PSBcImhleFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b0hleCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9CYXNlNjQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IFwidXRmOFwiKSB7XG4gICAgICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9VdGY4KCk7XG4gICAgfVxuICAgIGluc3BlY3QoKSB7XG4gICAgICAgIHJldHVybiBgPFdlYkJ1ZiAke3RoaXMudG9IZXgoKS5zbGljZSgwLCA0MCkgKyAodGhpcy5sZW5ndGggPiA0MCA/IFwiLi4uXCIgOiBcIlwiKX0+YDtcbiAgICB9XG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7XG4gICAgfVxuICAgIGNvbXBhcmUob3RoZXIpIHtcbiAgICAgICAgY29uc3QgbGVuID0gTWF0aC5taW4odGhpcy5sZW5ndGgsIG90aGVyLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2ldICE9PSBvdGhlcltpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2ldIDwgb3RoZXJbaV0gPyAtMSA6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoIDwgb3RoZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID4gb3RoZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgc3RhdGljIGNvbXBhcmUoYnVmMSwgYnVmMikge1xuICAgICAgICByZXR1cm4gYnVmMS5jb21wYXJlKGJ1ZjIpO1xuICAgIH1cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZShvdGhlcikgPT09IDA7XG4gICAgfVxuICAgIHdyaXRlKGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAgICAgICB2ZXJpZnlPZmZzZXQob2Zmc2V0LCBidWYubGVuZ3RoLCB0aGlzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuc2V0KGJ1Ziwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIGJ1Zi5sZW5ndGg7XG4gICAgfVxuICAgIHJlYWQob2Zmc2V0LCBleHQpIHtcbiAgICAgICAgdmVyaWZ5T2Zmc2V0KG9mZnNldCwgZXh0LCB0aGlzLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0aGlzLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgZXh0KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@webbuf+webbuf@3.0.26/node_modules/@webbuf/webbuf/dist/webbuf.js\n");

/***/ })

};
;