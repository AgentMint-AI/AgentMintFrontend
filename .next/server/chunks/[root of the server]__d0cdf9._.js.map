{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///home/abubakrjimoh/Desktop/Coding%20Stuffs/hackathon/secret-network/memeAi_coin_creator/ai-meme-coin-creator/src/app/api/cid/%5B...params%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createAutoDriveApi, downloadFile } from \"@autonomys/auto-drive\";\n\nconst detectFileType = async (arrayBuffer: ArrayBuffer): Promise<string> => {\n  const bytes = [...new Uint8Array(arrayBuffer.slice(0, 4))]\n    .map((byte) => byte.toString(16).padStart(2, \"0\"))\n    .join(\"\")\n    .toUpperCase();\n\n  const magicNumbers = {\n    \"89504E47\": \"image/png\",\n    FFD8FFE0: \"image/jpeg\",\n    FFD8FFE1: \"image/jpeg\",\n    FFD8FFE2: \"image/jpeg\",\n    FFD8FFE3: \"image/jpeg\",\n    FFD8FFE8: \"image/jpeg\",\n    FFD8FFDB: \"image/jpeg\",\n    FFD8FFEE: \"image/jpeg\",\n    \"47494638\": \"image/gif\",\n    \"3C3F786D\": \"image/svg+xml\",\n    \"3C737667\": \"image/svg+xml\",\n    \"424D\": \"image/bmp\",\n  };\n\n  for (const [signature, type] of Object.entries(magicNumbers)) {\n    if (bytes.startsWith(signature)) {\n      return type;\n    }\n  }\n\n  return \"unknown\";\n};\n\nconst apiKey = process.env.AUTO_DRIVE_API_KEY;\nif (apiKey == undefined) {\n  throw new Error(\"AUTO_DRIVE_API_KEY is not set\");\n}\n\nasync function fetchFromAutoDrive(cid: string) {\n  const api = createAutoDriveApi({ apiKey, network: \"taurus\" });\n  console.log(cid, \"cid\");\n  try {\n    const stream = await downloadFile(api, cid);\n    let file = Buffer.alloc(0);\n    for await (const chunk of stream) {\n      file = Buffer.concat([file, chunk]);\n    }\n    return file;\n  } catch (error) {\n    console.error(\"Error downloading file:\", error);\n    throw new Error(\"CID not found\");\n  }\n}\n\nasync function processMetadata(cid: string): Promise<NextResponse> {\n  try {\n    const fileBuffer = await fetchFromAutoDrive(cid);\n    const jsonString = fileBuffer.toString(\"utf-8\");\n    console.log(jsonString, \"jsonString(((((   ))))))))))\");\n    const metadata = JSON.parse(jsonString.trim());\n\n    return NextResponse.json(metadata, { status: 200 });\n  } catch (error) {\n    console.error(\"Error processing metadata:\", error);\n    return NextResponse.json(\n      { error: \"Invalid metadata format\" },\n      { status: 400 }\n    );\n  }\n}\n\nasync function processImage(cid: string): Promise<NextResponse> {\n  try {\n    const fileBuffer = await fetchFromAutoDrive(cid);\n    const fileType = await detectFileType(fileBuffer);\n\n    if (!fileType.startsWith(\"image/\")) {\n      return NextResponse.json(\n        { error: \"Invalid image format\" },\n        { status: 400 }\n      );\n    }\n\n    return new NextResponse(fileBuffer, {\n      status: 200,\n      headers: {\n        \"Content-Type\": fileType,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error processing image:\", error);\n    return NextResponse.json(\n      { error: \"Failed to process image\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  try {\n    const pathname = req.nextUrl.pathname;\n    const segments = pathname.split(\"/\").slice(3);\n    const type = segments[0]; // 'metadata' or 'image'\n    const cid = segments[1];\n\n    if (!cid) {\n      return NextResponse.json({ error: \"CID is required\" }, { status: 400 });\n    }\n\n    if (type === \"metadata\") {\n      return await processMetadata(cid);\n    } else if (type === \"image\") {\n      return await processImage(cid);\n    } else {\n      return NextResponse.json(\n        { error: \"Invalid type - must be 'metadata' or 'image'\" },\n        { status: 400 }\n      );\n    }\n  } catch (error) {\n    return NextResponse.json(\n      { error: \"Failed to process request\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}