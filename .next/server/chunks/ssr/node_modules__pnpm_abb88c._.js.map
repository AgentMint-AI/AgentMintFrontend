{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"readContract.js","sources":["file:///home/abubakrjimoh/Desktop/Coding%20Stuffs/hackathon/secret-network/memeAi_coin_creator/ai-meme-coin-creator/node_modules/.pnpm/%40wagmi%2Bcore%402.16.5_%40tanstack%2Bquery-core%405.66.4_%40types%2Breact%4019.0.10_react%4019.0.0_typescript%405_v24tszrn7azvqaofwkoqcqqofu/node_modules/%40wagmi/core/src/query/readContract.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\n\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from '../actions/readContract.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { UnionExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type ReadContractOptions<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config,\n> = UnionExactPartial<ReadContractParameters<abi, functionName, args, config>> &\n  ScopeKeyParameter\n\nexport function readContractQueryOptions<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(\n  config: config,\n  options: ReadContractOptions<abi, functionName, args, config> = {} as any,\n) {\n  return {\n    // TODO: Support `signal` once Viem actions allow passthrough\n    // https://tkdodo.eu/blog/why-you-want-react-query#bonus-cancellation\n    async queryFn({ queryKey }) {\n      const abi = options.abi as Abi\n      if (!abi) throw new Error('abi is required')\n\n      const { functionName, scopeKey: _, ...parameters } = queryKey[1]\n      const addressOrCodeParams = (() => {\n        const params = queryKey[1] as unknown as ReadContractParameters\n        if (params.address) return { address: params.address }\n        if (params.code) return { code: params.code }\n        throw new Error('address or code is required')\n      })()\n\n      if (!functionName) throw new Error('functionName is required')\n\n      return readContract(config, {\n        abi,\n        functionName,\n        args: parameters.args as readonly unknown[],\n        ...addressOrCodeParams,\n        ...parameters,\n      }) as Promise<ReadContractData<abi, functionName, args>>\n    },\n    queryKey: readContractQueryKey(options as any) as any,\n  } as const satisfies QueryOptions<\n    ReadContractQueryFnData<abi, functionName, args>,\n    ReadContractErrorType,\n    ReadContractData<abi, functionName, args>,\n    ReadContractQueryKey<abi, functionName, args, config>\n  >\n}\n\nexport type ReadContractQueryFnData<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ReadContractReturnType<abi, functionName, args>\n\nexport type ReadContractData<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ReadContractQueryFnData<abi, functionName, args>\n\nexport function readContractQueryKey<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(options: ReadContractOptions<abi, functionName, args, config> = {} as any) {\n  const { abi: _, ...rest } = options\n  return ['readContract', filterQueryOptions(rest)] as const\n}\n\nexport type ReadContractQueryKey<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config,\n> = ReturnType<typeof readContractQueryKey<config, abi, functionName, args>>\n"],"names":[],"mappings":";;;;AAGA,OAAO,EAIL,YAAY,GACb,MAAM,4BAA4B,CAAA;AAInC,OAAO,EAAE,kBAAkB,EAAE,MAAM,YAAY,CAAA;;;AAUzC,SAAU,wBAAwB,CAMtC,MAAc,EACd,UAAgE,CAAA,CAAS;IAEzE,OAAO;QACL,6DAA6D;QAC7D,qEAAqE;QACrE,KAAK,CAAC,OAAO,EAAC,EAAE,QAAQ,EAAE;YACxB,MAAM,GAAG,GAAG,OAAO,CAAC,GAAU,CAAA;YAC9B,IAAI,CAAC,GAAG,EAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;YAE5C,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,UAAU,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAA;YAChE,MAAM,mBAAmB,GAAG,CAAC,GAAG,EAAE;gBAChC,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAsC,CAAA;gBAC/D,IAAI,MAAM,CAAC,OAAO,EAAE,OAAO;oBAAE,OAAO,EAAE,MAAM,CAAC,OAAO;gBAAA,CAAE,CAAA;gBACtD,IAAI,MAAM,CAAC,IAAI,EAAE,OAAO;oBAAE,IAAI,EAAE,MAAM,CAAC,IAAI;gBAAA,CAAE,CAAA;gBAC7C,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;YAChD,CAAC,CAAC,EAAE,CAAA;YAEJ,IAAI,CAAC,YAAY,EAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;YAE9D,qYAAO,eAAA,AAAY,EAAC,MAAM,EAAE;gBAC1B,GAAG;gBACH,YAAY;gBACZ,IAAI,EAAE,UAAU,CAAC,IAA0B;gBAC3C,GAAG,mBAAmB;gBACtB,GAAG,UAAU;aACd,CAAuD,CAAA;QAC1D,CAAC;QACD,QAAQ,EAAE,oBAAoB,CAAC,OAAc,CAAQ;KAMtD,CAAA;AACH,CAAC;AAcK,SAAU,oBAAoB,CAKlC,UAAgE,CAAA,CAAS;IACzE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,OAAO,CAAA;IACnC,OAAO;QAAC,cAAc;6XAAE,qBAAA,AAAkB,EAAC,IAAI,CAAC;KAAU,CAAA;AAC5D,CAAC","ignoreList":[0]}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"file":"useReadContract.js","sources":["file:///home/abubakrjimoh/Desktop/Coding%20Stuffs/hackathon/secret-network/memeAi_coin_creator/ai-meme-coin-creator/node_modules/.pnpm/wagmi%402.14.12_%40react-native-async-storage%2Basync-storage%401.24.0_react-native%400.78.0_%40babel%2Bcor_rrkmktrmxhhwqqt5ezpjjw3c5m/node_modules/wagmi/src/hooks/useReadContract.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ReadContractErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { UnionCompute } from '@wagmi/core/internal'\nimport {\n  type ReadContractData,\n  type ReadContractOptions,\n  type ReadContractQueryFnData,\n  type ReadContractQueryKey,\n  readContractQueryOptions,\n  structuralSharing,\n} from '@wagmi/core/query'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName, Hex } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseReadContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config = Config,\n  selectData = ReadContractData<abi, functionName, args>,\n> = UnionCompute<\n  ReadContractOptions<abi, functionName, args, config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      ReadContractQueryFnData<abi, functionName, args>,\n      ReadContractErrorType,\n      selectData,\n      ReadContractQueryKey<abi, functionName, args, config>\n    >\n>\n\nexport type UseReadContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  selectData = ReadContractData<abi, functionName, args>,\n> = UseQueryReturnType<selectData, ReadContractErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useReadContract */\nexport function useReadContract<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config = ResolvedRegister['config'],\n  selectData = ReadContractData<abi, functionName, args>,\n>(\n  parameters: UseReadContractParameters<\n    abi,\n    functionName,\n    args,\n    config,\n    selectData\n  > = {} as any,\n): UseReadContractReturnType<abi, functionName, args, selectData> {\n  const { abi, address, functionName, query = {} } = parameters\n  // @ts-ignore\n  const code = parameters.code as Hex | undefined\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = readContractQueryOptions<config, abi, functionName, args>(\n    config,\n    { ...(parameters as any), chainId: parameters.chainId ?? chainId },\n  )\n  const enabled = Boolean(\n    (address || code) && abi && functionName && (query.enabled ?? true),\n  )\n\n  return useQuery({\n    ...query,\n    ...options,\n    enabled,\n    structuralSharing: query.structuralSharing ?? structuralSharing,\n  })\n}\n"],"names":[],"mappings":";;;AAqBA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAD1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;;AAD5C,OAAO,EAA2B,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAXrE,OAAO,EAKL,wBAAwB,EACxB,iBAAiB,GAClB,MAAM,mBAAmB,CAAA;AAf1B,YAAY,CAAA;;;;;AA8DN,SAAU,eAAe,CAO7B,aAMI,CAAA,CAAS;IAEb,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,GAAG,CAAA,CAAE,EAAE,GAAG,UAAU,CAAA;IAC7D,aAAa;IACb,MAAM,IAAI,GAAG,UAAU,CAAC,IAAuB,CAAA;IAE/C,MAAM,MAAM,8WAAG,YAAA,AAAS,EAAC,UAAU,CAAC,CAAA;IACpC,MAAM,OAAO,+WAAG,aAAA,AAAU,EAAC;QAAE,MAAM;IAAA,CAAE,CAAC,CAAA;IAEtC,MAAM,OAAO,IAAG,sZAAA,AAAwB,EACtC,MAAM,EACN;QAAE,GAAI,UAAkB;QAAE,OAAO,EAAE,UAAU,CAAC,OAAO,IAAI,OAAO;IAAA,CAAE,CACnE,CAAA;IACD,MAAM,OAAO,GAAG,OAAO,CACrB,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CACpE,CAAA;IAED,8XAAO,WAAA,AAAQ,EAAC;QACd,GAAG,KAAK;QACR,GAAG,OAAO;QACV,OAAO;QACP,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,qXAAI,oBAAiB;KAChE,CAAC,CAAA;AACJ,CAAC","ignoreList":[0]}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}