{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///home/abubakrjimoh/Desktop/Coding%20Stuffs/hackathon/secret-network/memeAi_coin_creator/ai-meme-coin-creator/src/app/api/token/metadata/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { createAutoDriveApi, uploadFile } from \"@autonomys/auto-drive\";\nimport { TokenMetadata } from \"@/types/token\";\n\nexport async function POST(req: Request) {\n  if (!process.env.AUTO_DRIVE_API_KEY) {\n    return NextResponse.json(\n      { error: \"AutoDrive API key is not set\" },\n      { status: 500 }\n    );\n  }\n\n  try {\n    const metadata: TokenMetadata = await req.json();\n    const metadataBuffer = Buffer.from(JSON.stringify(metadata));\n\n    const driveClient = createAutoDriveApi({\n      apiKey: process.env.AUTO_DRIVE_API_KEY,\n      url:\n        process.env.AUTO_DRIVE_URL ||\n        \"https://demo.auto-drive.autonomys.xyz/api\",\n    });\n\n    const genericFile = {\n      read: async function* () {\n        yield metadataBuffer;\n      },\n      name: `${metadata.name}-${metadata.chain}-metadata.json`,\n      mimeType: \"application/json\",\n      size: metadataBuffer.length,\n    };\n\n    const options = {\n      compression: true,\n      onProgress: (progress: number) => {\n        console.log(`Upload is ${progress}% completed`);\n      },\n    };\n\n    const cid = await uploadFile(driveClient, genericFile, options);\n\n    return NextResponse.json({\n      cid: cid.toString(),\n      url: `${process.env.NEXT_PUBLIC_HOST}/api/cid/metadata/${cid}`,\n    });\n  } catch (error) {\n    console.error(\"Error uploading metadata:\", error);\n    return NextResponse.json(\n      { error: \"Failed to upload metadata\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,GAAY;IACrC,IAAI,CAAC,QAAQ,GAAG,CAAC,kBAAkB,EAAE;QACnC,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,WAA0B,MAAM,IAAI,IAAI;QAC9C,MAAM,iBAAiB,OAAO,IAAI,CAAC,KAAK,SAAS,CAAC;QAElD,MAAM,cAAc,CAAA,GAAA,uOAAA,CAAA,qBAAkB,AAAD,EAAE;YACrC,QAAQ,QAAQ,GAAG,CAAC,kBAAkB;YACtC,KACE,QAAQ,GAAG,CAAC,cAAc,IAC1B;QACJ;QAEA,MAAM,cAAc;YAClB,MAAM;gBACJ,MAAM;YACR;YACA,MAAM,GAAG,SAAS,IAAI,CAAC,CAAC,EAAE,SAAS,KAAK,CAAC,cAAc,CAAC;YACxD,UAAU;YACV,MAAM,eAAe,MAAM;QAC7B;QAEA,MAAM,UAAU;YACd,aAAa;YACb,YAAY,CAAC;gBACX,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,SAAS,WAAW,CAAC;YAChD;QACF;QAEA,MAAM,MAAM,MAAM,CAAA,GAAA,uOAAA,CAAA,aAAU,AAAD,EAAE,aAAa,aAAa;QAEvD,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,KAAK,IAAI,QAAQ;YACjB,KAAK,6DAAgC,kBAAkB,EAAE,KAAK;QAChE;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}